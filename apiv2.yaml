openapi: 3.0.0
servers:
  - url: 'https://rnge.com.br:8091/v2'
    description: Produção
info:
  description: |-
    Nossa API utiliza o padrão REST e autenticação HTTP AuthBasic (conforme RFC 7617) em todos os recursos. O formato padrão de resposta é o JSON na imensa maioria dos recursos; as exceções são os recursos que retornam NFe/NFCe (XML) ou documentos para impressão (PDF).

    # AUTENTICAÇÃO

    ## Usuário, tenant e senha

    Conforme a RFC7617, o cabeçalho *Authentication* é composto da palavra `Basic` seguida de um espaço e da string `username:password` em base64.

    > If the user agent wishes to send the user-id "Aladdin" and password
    > "open sesame", it would use the following header field:
    >
    >   Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

    Fonte: RFC 7617, capítulo 2, em https://datatracker.ietf.org/doc/html/rfc7617

    Em nosso caso, o campo "username" é composto de usuario@tenant, então o usuário "admin", tenant "zezinho" e senha "zeus" resultam na string `admin@zezinho:zeus` que convertida para base64 fica `YWRtaW5AemV6aW5obzp6ZXVz`. O próprio aplicativo cliente deve se encarregar de fazer essa conversão; para testes, pode-se usar sites que convertem para base64 como https://www.base64encode.org e similares.

    # DEFINIÇÕES

    **Tenant\:** Conta do cliente (eg:casadopapel) na Rednaxel. O tenant pode ter uma ou empresas (companies), que podem ser filiais usando a mesma raiz de CNPJ ou não.

    **Usuário\:** Cada usuário pertence a um tenant e tem um UserID global e um UserName único dentro do tenant. Por exemplo, "admin@thony" é diferente de "admin@tebori", apesar de ambos serem ADMIN cada um tem um UserID próprio.

    # PADRÕES

    Todos os GET usam os parâmetros "filter", "sort" e "range" da seguinte forma:

     | Parâmetro  | Formato | URL Query                              | SQL equivalente        |
     |------------|---------|----------------------------------------|------------------------|
     | filter     |   JSON  | GET v2/resources?filter={"store":34}   | ... WHERE store = 34   |
     | sort       |  CSV    | GET v2/resources?sort=\["name","ASC"\] | ... ORDER BY name, asc |
     | range      |  CSV    | GET v2/resources?range=\[0,9\]         | ... OFFSET 0 LIMIT 10  |

    # FERRAMENTAS

    Os exemplos nesse documento usam a ferramenta de linha-de-comando curl. Ela está disponível na maioria das distribuições Linux via apt-get ou similar.
    Versão Windows: https://curl.haxx.se/windows/
  version: 2.0.0
  title: API do RNGE 4
  termsOfService: 'https://rednaxel.com/termos-de-uso'
  contact:
    name: Suporte
    email: suporte@rednaxel.com
    url: 'https://suporte.rednaxel.com'
  x-logo:
    url: 'https://storage.googleapis.com/rednaxel-dados/rednaxel-264.png'
    altText: Logo da Rednaxel
tags:
  - name: Login
    description: |
      This is the first step in order to use API.
  - name: Images
    description: |
      This resource can save images for company logo, product image and danfe’s image. The image file must be jpeg or png. 
      **Warning\:** images for danfe **must be in jpeg** format and for logo **must be in png** format. All 
      images must have more than 1 Kb and less than 1 Mb.
  - name: Distribuição
  - name: Pessoas
  - name: Addresses
paths:
  /login:
    parameters: []
    post:
      summary: ''
      operationId: ''
      responses:
        '200':
          description: OK
      parameters:
        - schema:
            type: string
            default: Basic QURNSU5AemV6aW5obzp6ZXVz=
          in: header
          name: Authorization
          required: true
          description: BasicAuth
      description: Efetua o login na plataforma para obter UserID e Token
      security:
        - Basic QURNSU5AemV6aW5obzp6ZXVz: []
      tags:
        - Autenticação
  /ping:
    get:
      summary: ''
      tags:
        - Autenticação
      responses: {}
      operationId: ''
      description: Verifica se o servidor está online
      security: []
  /cashiers:
    get:
      tags:
        - PDV
      summary: ''
      description: Lista de Equipamentos PDV de todas as lojas (companies) do tenant
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
        - schema:
            type: string
            default: Basic MTIzNDp1dWlkLXRva2Vu
          in: header
          name: Authorization
          required: true
          description: 'ID:TOKEN'
    post:
      tags:
        - PDV
      summary: ''
      description: Cria novo PDV
      requestBody:
        $ref: '#/components/requestBodies/CashiersPost'
  '/cashiers/{id}':
    get:
      tags:
        - PDV
      summary: ''
      description: Consulta PDV
      parameters:
        - schema:
            type: string
            default: Basic MTIzNDp1dWlkLXRva2Vu
          in: header
          description: 'ID:TOKEN'
          required: true
          name: Authorization
    put:
      tags:
        - PDV
      summary: ''
      description: Atualiza um PDV
      requestBody:
        $ref: '#/components/requestBodies/CashiersPut'
      responses:
        '200':
          description: Success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashierResp'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    delete:
      tags:
        - PDV
      summary: ''
      description: Deleta um PDV
      responses:
        '200':
          description: Info about deleted POS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cashier'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      operationId: ''
    parameters:
      - schema:
          type: integer
          minimum: 1
          default: 1
        name: id
        in: path
        required: true
        description: ID do PDV
  /orders:
    get:
      tags:
        - Pedidos
      summary: ''
      description: Lista de pedidos
      parameters:
        - name: filter
          in: query
          description: Filtros
          schema:
            type: string
        - name: range
          in: query
          description: Paginação
          schema:
            type: array
            items:
              type: integer
    post:
      tags:
        - Pedidos
      summary: ''
      description: Cria um novo pedido
      requestBody:
        description: Pedido a ser criado
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovoPedido'
  '/orders/{id}':
    put:
      tags:
        - Pedidos
      summary: ''
      description: Atualiza pedido
      requestBody:
        description: Order to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovoPedido'
    get:
      tags:
        - Pedidos
      summary: ''
      description: Consulta pedido
    parameters:
      - schema:
          type: integer
          default: '1234'
        name: id
        in: path
        required: true
        description: Número do Pedido
  '/images/produto/{code}':
    post:
      tags:
        - Images
      summary: Product image upload
      description: Uploads an image for the product
      parameters:
        - name: code
          in: path
          description: Product code
          schema:
            type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST https://rnge.com.br:8091/v2/images/produto/10373 --user ${user_id}:${token} --data-urlencode imagem@file.jpg | jq .
      responses:
        '200':
          description: URL on the cloud
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Images'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/images/produto/{code}/{position}':
    post:
      tags:
        - Images
      summary: Product image upload position
      description: Uploads one more image for the same product
      parameters:
        - name: code
          in: path
          description: Product code
          schema:
            type: integer
        - name: position
          in: path
          description: ID for the image on the same product
          schema:
            type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST https://rnge.com.br:8091/v2/images/produto/10373/1 --user ${user_id}:${token} --data-urlencode imagem@file.jpg | jq .
      responses:
        '200':
          description: URL on the cloud
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesPos'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/images/logo/{company}':
    post:
      tags:
        - Images
      summary: Company logo image upload
      description: Uploads an image for the company logo. If `company` is greater than 0 is possible to upload more than one image for the same company
      parameters:
        - name: company
          in: path
          description: Company ID
          schema:
            type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST https://rnge.com.br:8091/v2/images/logo/0 --user ${user_id}:${token} --data-urlencode imagem@file.png | jq .
      responses:
        '200':
          description: URL on the cloud
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesLogo'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/images/danfe/{root_cnpj}':
    post:
      tags:
        - Images
      summary: DANFE image upload
      description: Uploads an image for danfe document (this document is specific for Brazil)
      parameters:
        - name: root_cnpj
          in: path
          description: Common part for the company ID when it has multiples branch offices
          schema:
            type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST https://rnge.com.br:8091/v2/images/danfe/5563868 --user ${user_id}:${token} --data-urlencode imagem@file.jpg | jq .
      responses:
        '200':
          description: URL on the cloud
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesDanfe'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/images/danfe/{root_cnpj}/{company}':
    post:
      tags:
        - Images
      summary: DANFE image upload for a company
      description: Uploads an image for danfe document (this document is specific for Brazil) on a specific company
      parameters:
        - name: root_cnpj
          in: path
          description: Common part for the company ID when it has multiples branch offices
          schema:
            type: integer
        - name: company
          in: path
          description: Company ID
          schema:
            type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST https://rnge.com.br:8091/v2/images/danfe/5563868/1596 --user ${user_id}:${token} --data-urlencode imagem@file.jpg | jq .
      responses:
        '200':
          description: URL on the cloud
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesDanfeCo'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/orders/{numped}/cancel':
    post:
      tags:
        - Orders
      summary: Order cancel
      description: It cancels an order (demands order number)
      parameters:
        - in: path
          name: numped
          schema:
            type: integer
          required: true
          description: Order number
      responses:
        '200':
          description: Canceled order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PedidoCancelado'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/orders/284231/cancel --user ${user_id}:${token} | jq .'
  '/orders/{numped}/items':
    post:
      tags:
        - Orders
      summary: Order items
      description: It inserts a product in an order (demands order number)
      parameters:
        - in: path
          name: numped
          schema:
            type: integer
          required: true
          description: Order number
      requestBody:
        description: Product to be inserted
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItems'
      responses:
        '200':
          description: Inserted product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/orders/123456/items --user ${user_id}:${token} -d payload.json | jq .'
  '/orders/{numped}/status':
    post:
      tags:
        - Orders
      summary: Order status
      description: Will change the order's status (demands order number)
      parameters:
        - in: path
          name: numped
          schema:
            type: integer
          required: true
          description: Order number
      requestBody:
        description: Aditional information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatus'
      responses:
        '200':
          description: Order's status changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/orders/123456/status --user ${user_id}:${token} -d payload.json | jq .'
    get:
      tags:
        - Orders
      summary: Order status
      description: Returns the possible status for an order (demands order number)
      parameters:
        - in: path
          name: orderID
          schema:
            type: integer
          required: true
          description: Order number
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/orders/179925/status" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Possible status list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusGet'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/orders/{numped}/sync':
    put:
      tags:
        - Orders
      summary: Order sync
      description: Order's update (demands order number)
      parameters:
        - in: path
          name: numped
          schema:
            type: integer
          required: true
          description: Order number
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/orders/179925/sync" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Flag 'atualizarerp' is false
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/orders/{numped}/verify':
    get:
      tags:
        - Orders
      summary: Order verify
      description: Shows complete information about an order (demands order number)
      parameters:
        - in: path
          name: numped
          schema:
            type: integer
          required: true
          description: Order number
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/orders/179925/verify" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Information about an order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusVerify'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /batches:
    post:
      tags:
        - Batches
      summary: Batches
      description: Generate batche invoices
      requestBody:
        $ref: '#/components/requestBodies/BatchesPost'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/batches" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Receipt number
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchesPostResult'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /companies:
    get:
      tags:
        - Companies
      summary: Companies list
      description: Returns a list of companies
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/companies" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/companies?filter={"id_empresa":3476}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Company information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Companies'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Companies
      summary: New company
      description: Creates a new company returning the company's ID
      requestBody:
        description: Company to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovaEmpresa'
      responses:
        '200':
          description: Created company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empresa'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/companies --user ${user_id}:${token} -d payload.json | jq .'
  '/companies/{idempresa}':
    put:
      tags:
        - Companies
      summary: Company update
      description: Modify a existing company (demands company ID)
      parameters:
        - in: path
          name: idempresa
          schema:
            type: integer
          required: true
          description: Company ID
      requestBody:
        description: Company to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovaEmpresa'
      responses:
        '200':
          description: Updated company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empresa'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X PUT https://rnge.com.br:8091/v2/companies/176542 --user ${user_id}:${token} -d payload.json | jq .'
    get:
      tags:
        - Companies
      summary: Company info
      description: Returns data about existing company (demands company ID)
      parameters:
        - in: path
          name: idempresa
          schema:
            type: integer
          required: true
          description: Company ID
      responses:
        '200':
          description: Company information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyInfo'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X GET https://rnge.com.br:8091/v2/companies/176542 --user ${user_id}:${token} | jq .'
  /certificates:
    get:
      tags:
        - Certificates
      summary: Certificates list
      description: Returns a list of certificates
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/certificates" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/certificates?filter={"raiz_cnpj":47542680}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Certificate information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificates'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/certificates/{raiz_cnpj}':
    get:
      tags:
        - Certificates
      summary: Certificate info
      description: Returns data about specific certificate (demands root company ID)
      parameters:
        - in: path
          name: raiz_cnpj
          schema:
            type: integer
          required: true
          description: Root company ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/certificates/47542680" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Certificate information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /contacttypes:
    get:
      tags:
        - Contact types
      summary: Lista de Tipos de Contatos
      description: Returns a list of contact types
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/contacttypes" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/contacttypes?filter={"descricao_tipo":"test"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Contact type information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacttypes'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/contacttypes/{id}':
    get:
      tags:
        - Contact types
      summary: Contact types info
      description: Returns data about specific contact type (demands contact type ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Contact type ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/contacttypes/1234" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Contact type information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacttype'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /slips:
    get:
      tags:
        - Slips
      summary: Slips list
      description: Returns a list of slips
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/slips" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/slips?filter={"chnfe":"43170102505657000136550010011145821111011012","datafim":"2020-01-20","dataini":"2019-12-20","cnpj_emit":4754268000170,"id_empresa":0,"id_pessoa":0,"nome_razao":"test","pdv":0,"numero":0,"total_vnf":0.00,"formas_pagto":"test"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Slip information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slips'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Slips
      summary: Record slip
      description: Record a slip on cloud
      requestBody:
        description: Slip to be recorded
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovoCupom'
      responses:
        '200':
          description: Recorded slip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/slips --user ${user_id}:${token} -d payload.json | jq .'
  /slips/reasons:
    post:
      tags:
        - Slips
      summary: Slip update
      description: Insert extra data in slip's items
      requestBody:
        description: Extra data to be inserted
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovoItem'
      responses:
        '200':
          description: Inserted extra data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/slips/reasons --user ${user_id}:${token} -d payload.json | jq .'
  /recharges:
    get:
      tags:
        - Recharges
      summary: Reacharge list
      description: Returns a list of pending recharges
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/recharges" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Recharges information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recharges'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /customers:
    get:
      tags:
        - Customers
      summary: Customers list
      description: Returns a list of customers
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/customers" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/customers?filter={"id":3545,"nome":"test","inativos":true,"ids":[0,1,2],"q":"st"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Customer information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customers'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Customers
      summary: New customers
      description: Creates a new customer
      requestBody:
        description: Customer to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/customers --user ${user_id}:${token} -d payload.json | jq .'
  '/customers/{id}':
    get:
      tags:
        - Customers
      summary: Customer info
      description: Returns data about existing customer (demands customer ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Customer ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/customers/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Customer information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Customers
      summary: Customer update
      description: Modify a existing customer (demands customer ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Customer ID
      requestBody:
        description: Customer to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/customers/123 --user ${user_id}:${token} -d payload.json | jq .'
    delete:
      tags:
        - Customers
      summary: Customer desable
      description: Deactivates a customer on the system (demands customer ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Customer ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X DELETE "https://rnge.com.br:8091/v2/customers/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Customer information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /customers/import:
    post:
      tags:
        - Customers Import
      summary: Customers import
      description: Import's customers to the system
      requestBody:
        description: Customer to be imported
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerImport'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/customers/import" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /customerphones:
    get:
      tags:
        - Customer Phones
      summary: Customer phones list
      description: Returns a list of customer phones
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/customerphones" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/customerphones?filter={"id":1,"id_pessoa":123,"inativos":false}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Purchase information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPhones'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /customertransactions:
    get:
      tags:
        - Customer Transactions
      summary: Customer transactions list
      description: Returns a list of customer transactions
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/customertransactions" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/customertransactions?filter={"id_pessoa":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Customer transactions information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerTransactions'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /customeremails:
    get:
      tags:
        - Customer Emails
      summary: Customer e-mails list
      description: Returns a list of customer e-mails
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/customeremails" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/customeremails?filter={"id":123,"eh_pessoal":true,"eh_favorito":false,"recebe_danfe":true}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Customer e-mails information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerEmails'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Customer Emails
      summary: New customer e-mail
      description: Creates a new customer e-mail
      requestBody:
        description: Customer e-mail to be imported
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerEmail'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/customeremails" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/customeremails/{id}':
    get:
      tags:
        - Customer Emails
      summary: Customer e-mail info
      description: Returns data about existing customer e-mail (demands person ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Person ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/customeremails/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Customer e-mail information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerEmail'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /addresses:
    get:
      tags:
        - Pessoas
      summary: Lista de endereços
      description: Retorna a lista de endereços de uma pessoa (filtro `id_pessoa` int64) ou a lista de endereços das lojas de uma rede (filtro `cliente_retira` bool). O filtro `cliente_retira` tem prioridade sobre os demais.
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/addresses" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/addresses?filter={"id":123,"id_pessoa":456,"inativos":false}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Addresses information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Addresses
      summary: New address
      description: Creates a new address returning the address's ID
      requestBody:
        description: Address to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/addresses" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Address ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/addresses/{id}':
    get:
      tags:
        - Pessoas
      summary: Dados de um endereço
      description: Um endereço (de uma pessoa)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Address ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/addresses/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Address information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Addresses
      summary: Address update
      description: Modify a existing address (demands address ID)
      requestBody:
        description: Address to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/addresses/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Address ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    delete:
      tags:
        - Addresses
      summary: Address desable
      description: Deactivates an address on the system (demands address ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Customer ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X DELETE "https://rnge.com.br:8091/v2/addresses/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Address ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /addresstypes:
    get:
      tags:
        - Pessoas
      summary: Address types list
      description: Returns a list of address types
      parameters:
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/addresstypes" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Address types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressTypes'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/addresstypes/{id}':
    get:
      tags:
        - Pessoas
      summary: Address types info
      description: Returns data about existing address type (demands address type ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Address type ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/addresstypes/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Address type info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressType'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /phonetypes:
    get:
      tags:
        - Phone Types
      summary: Phone types list
      description: Returns a list of phone types
      parameters:
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/phonetypes" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Phone types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneTypes'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /purchases:
    get:
      tags:
        - Purchases
      summary: Purchases list
      description: Returns a list of purchases
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/purchases" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/purchases?filter={"id_pessoa":12345,"serie":123,"nunmero":4567,"cod_sku":45,"nome_fornec":"teste","dataini":"2020-01-01","datafim":"2020-01-05"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Purchase information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchases'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Purchases
      summary: Insert purchase
      description: Insert invoice's files on the system
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/purchases" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /purchaseitems:
    get:
      tags:
        - Purchase Items
      summary: Purchase items list
      description: Returns a list of purchase items
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/purchaseitems" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/purchaseitems?filter={"id_compra":12345}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Purchase items information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseItems'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Purchase Items
      summary: New purchase item
      description: Creates a new purchase item
      requestBody:
        description: Purchase item to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseItem'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/purchaseitems" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created purchase item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseItem'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/purchaseitems/{id}':
    get:
      tags:
        - Purchase Items
      summary: Purchase item info
      description: Returns data about existing purchase item (demands purchase item ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Purchase item ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/purchaseitems/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Purchase item info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseItem'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Purchase Items
      summary: Purchase item update
      description: Modify a existing purchase item (demands purchase item ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Purchase item ID
      requestBody:
        description: Purchase item to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseItem'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/purchaseitems/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Purchase item modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseItem'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /carriers:
    get:
      tags:
        - Carriers
      summary: Carriers list
      description: Returns a list of carriers
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/carriers" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/carriers?filter={"nome_entregador":"teste","inativos":false,"id_empresa":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Carriers list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carriers'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Carriers
      summary: New carrier
      description: Creates a new carrier
      requestBody:
        description: Carrier to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Carrier'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/carriers" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created carrier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carrier'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/carriers/{id}':
    get:
      tags:
        - Carriers
      summary: Carrier info
      description: Returns data about existing carrier (demands carrier ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Carrier ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/carriers/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Carrier info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carrier'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Carriers
      summary: Carrier update
      description: Modify a existing carrier (demands carrier ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Carrier ID
      requestBody:
        description: Carrier to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Carrier'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/carriers/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Modified carrier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carrier'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /invoices:
    post:
      tags:
        - Invoices
      summary: Save invoice
      description: Sends an invoice XML to the cloud
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/invoices" --user ${user_id}:${token} --data-urlencode xml@invoice.xml | jq .
      responses:
        '200':
          description: Array of orders numbers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoices'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/invoices/{id}':
    put:
      tags:
        - Invoices
      summary: Invoice processing
      description: Loads an invoice from the cloud and process again
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Eletronic invoice's access key (chnfe)
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/invoices/43200105563868000113550200000117011814560946" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/invoices/{id}/events':
    post:
      tags:
        - Invoices
      summary: Event generation
      description: |
        Based on id sufix some events can be generated: If event type is 0 and id has sufix "0000000000" the 'disable' event will be generated. If event type is 110111
        the 'canceled' event will be generated. If event type is 110110 the 'retification letter' will be generated.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Eletronic invoice's access key (chnfe)
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/invoices/43200105563868000113550200000117011814560946/events" --user ${user_id}:${token} -d payload.json | jq .
      requestBody:
        description: Event data to be generated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeraEvento'
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/invoices/{id}/emails':
    post:
      tags:
        - Invoices
      summary: Sends e-mail
      description: Sends invoice XML and 'Danfe' (eletronic invoice auxiliary document) PDF by e-mail
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Eletronic invoice's access key (chnfe)
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/invoices/43180405563868000113657010000015301325665758/emails" --user ${user_id}:${token} | jq .
            curl -s -X POST "https://rnge.com.br:8091/v2/invoices/43180405563868000113657010000015301325665758/emails?para=johndoe@gmail.com" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /emailtemplates:
    get:
      tags:
        - Email Templates
      summary: Email templates list
      description: Returns a list of email templates
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/emailtemplates" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Array of email templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplates'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Email Templates
      summary: New email template
      description: Creates a new email template
      requestBody:
        description: Email template to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEmailTemplate'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/emailtemplates" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Email template created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplate'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/emailtemplates/{id}':
    put:
      tags:
        - Email Templates
      summary: Email template update
      description: Modify a existing email template (demands email template ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Email template ID
      requestBody:
        description: Email template to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEmailTemplate'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/emailtemplates/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Email template modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplate'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /catalogs:
    get:
      tags:
        - Catalogs
      summary: Catalogs list
      description: Returns a list of catalogs
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/catalogs" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/catalogs?filter={"inativos":true}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Array of catalogs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalogs'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Catalogs
      summary: New catalog
      description: Creates a new catalog
      requestBody:
        description: Catalog to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Catalog'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/catalogs" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Catalog created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/catalogs/{id}':
    get:
      tags:
        - Catalogs
      summary: Catalogs info
      description: Returns data about existing catalog (demands catalog ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Catalog ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/catalogs/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Catalog info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Catalogs
      summary: Catalog update
      description: Modify a existing catalog (demands catalog ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Catalog ID
      requestBody:
        description: Catalog to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Catalog'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/catalogs/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Catalog modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    delete:
      tags:
        - Catalogs
      summary: Catalog delete
      description: Delete a catalog from the system
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Catalog ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X DELETE "https://rnge.com.br:8091/v2/catalogs/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Catalog deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/catalogs/{id}/categories':
    get:
      tags:
        - Catalogs
      summary: Catalog's categories list
      description: Returns a list of catalog's categories
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Catalog ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/catalogs/123/categories" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Catalog categories list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCategories'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /categories:
    get:
      tags:
        - Categories
      summary: Categories list
      description: Returns a list of categories
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/categories" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/categories?filter={"catalog_id":123,"parent_id":546,"q":"test","vinculavel":true,"ids":[789,1011]}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Categories list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categories'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/categories/{id}':
    get:
      tags:
        - Categories
      summary: Category info
      description: Returns data about existing category (demands category ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Category ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/categories/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Category info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCategory'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /categorylinks:
    get:
      tags:
        - Category Links
      summary: Category links list
      description: Returns a list of category links
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/categorylinks" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/categorylinks?filter={"catalog_id":123,"breadcrumb":"test","q":"test"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Category links list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogLinks'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Category Links
      summary: New category link
      description: Creates a new category link
      requestBody:
        description: Category link to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCategoryLink'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/categorylinks" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Category link created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCategoryLink'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/categorylinks/{id}':
    get:
      tags:
        - Category Links
      summary: Category link info
      description: Returns data about existing category link (demands category link ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Category link ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/categorylinks/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Category links info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogLink'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Category Links
      summary: Category link update
      description: Modify a existing category link (demands category link ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Category link ID
      requestBody:
        description: Category link to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCategoryLink'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/categorylinks/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Category link modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCategoryLink'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /contracts:
    get:
      tags:
        - Contracts
      summary: Contracts list
      description: Returns a list of contracts
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/contracts" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/contracts?filter={"id_pessoa":123,"inativos":true}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Contracts list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contracts'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/contracts/{id}':
    get:
      tags:
        - Contracts
      summary: Contract info
      description: Returns data about existing contract (demands contract ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Contract ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/contracts/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Contract info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Contracts
      summary: Contract update
      description: Modify a existing order (demands contract ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Contract ID
      requestBody:
        description: Contract to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contract'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/contracts/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Contract modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /paymenttypes:
    get:
      tags:
        - Payment Types
      summary: Payment types list
      description: Returns a list of payment types
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/paymenttypes" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/paymenttypes?filter={"inativos":true}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Payment types list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTypes'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /suppliers:
    get:
      tags:
        - Suppliers
      summary: Suppliers list
      description: Returns a list of suppliers
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/suppliers" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/suppliers?filter={"inativos":true,"nome_fornec":"test"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Suppliers list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Suppliers'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/suppliers/{id:}':
    get:
      tags:
        - Suppliers
      summary: Suppliers info
      description: Returns data about existing supplier (demands supplier ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Supplier ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/suppliers/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Supplier info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /tasks:
    get:
      tags:
        - Tasks
      summary: Tasks list
      description: Returns a list of tasks
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/tasks" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/tasks?filter={"coluna":1,"user_id":234,"task_id":567}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Tasks list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /skus:
    get:
      tags:
        - Skus
      summary: Skus list
      description: Returns a list of skus (Stock Keeping Units)
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/skus" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/skus?filter={"codigo":123,"id_categ":456,"inativos":false,"ncm_vencido":true,"q":"test"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Skus list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skus'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/skus/{id}':
    get:
      tags:
        - Skus
      summary: Sku info
      description: Returns data about existing sku (demands sku ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Sku ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/skus/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Sku info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sku'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /skuarticles:
    get:
      tags:
        - Sku Articles
      summary: Sku articles list
      description: Returns a list of sku (Stock Keeping Units) articles
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/skuarticles" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/skuarticles?filter={"sku_id":123,"codigo_descricao":"test","fornecedor":"abc","marca":"def","id_categ":456,"nivel":789,"categoria":"test","fora_venda":false,"embalagens":false,"referencia":"ghi","ncm":"jkl"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Sku articles list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkuArticles'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /skustocks:
    get:
      tags:
        - Sku Stocks
      summary: Sku stocks list
      description: Returns a list of sku (Stock Keeping Units) stocks
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/skustocks" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/skustocks?filter={"cod_sku":123,"sku_id":456,"todos":true,"id_predio":789}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Sku stocks list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkuStocks'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /skutrends:
    get:
      tags:
        - Sku Trends
      summary: Sku trends list
      description: Returns a list of sku (Stock Keeping Units) trends
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/skustrends" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/skustrends?filter={"sku_id":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Sku trends list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkusTrends'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /skucurves:
    get:
      tags:
        - Sku Curves
      summary: Sku curves list
      description: Returns a list of sku (Stock Keeping Units) curves
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/skucurves" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/skucurves?filter={"cod_sku":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Sku curvves list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkuCurves'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /skucmms:
    get:
      tags:
        - Sku Cmms
      summary: Sku cmms list
      description: Returns a list of sku (Stock Keeping Units) cmms
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/skucmms" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/skucmms?filter={"sku_id":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Sku cmms list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkuCmms'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /incompleteopenings:
    get:
      tags:
        - Incomplete Openings
      summary: Incomplete openings list
      description: Returns a list of incomplete openings
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/incompleteopenings" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Incomplete openings list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncompleteOpenings'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/incompleteopenings/{id}':
    get:
      tags:
        - Incomplete Openings
      summary: Incomplete openings info
      description: Returns data about existing incomplete opening (demands opening ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Opening ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/incompleteopenings/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Incomplete openings info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncompleteOpening'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /reasons:
    get:
      tags:
        - Reasons
      summary: Reasons list
      description: Returns a list of reasons
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/reasons" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/reasons?filter={"tipo":123,"inativos":false}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Reason created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reasons'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Reasons
      summary: New reason
      description: Creates a new reason
      requestBody:
        description: Reason to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reason'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/reasons" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Reason created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/reasons/{id}':
    get:
      tags:
        - Reasons
      summary: Reason info
      description: Returns data about existing reason (demands reason ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Reason ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/reasons/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Reason info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Reasons
      summary: Reason update
      description: Modify a existing order (demands reason ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Reason ID
      requestBody:
        description: Reason to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reason'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/reasons/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Reason modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /parameters:
    get:
      tags:
        - Parameters
      summary: Parameters list
      description: Returns a list of parameters
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/parameters" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/parameters?filter={"escopo":"test","tipo_config":"test","nome_param":"test"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Parameter list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parameters'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/parameters/{id}':
    get:
      tags:
        - Parameters
      summary: Parameter info
      description: Returns data about existing parameter (demands parameter ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Parameter ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/parameter/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Reason created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parameter'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Parameters
      summary: Parameter update
      description: Modify a existing parameter (demands parameter ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Parameter ID
      requestBody:
        description: Parameter be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Parameter'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/parameters/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /barcodes:
    get:
      tags:
        - Barcodes
      summary: Barcodes list
      description: Returns a list of barcodes
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/barcodes" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/barcodes?filter={"cod_produto":123,"cod_sku":456}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Barcodes list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Barcodes'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/barcodes/{id}':
    get:
      tags:
        - Barcodes
      summary: Barcodes info
      description: Returns data about existing barcode (demands barcode ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Barcode ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/barcodes/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Barcodes list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Barcode'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /issuers:
    get:
      tags:
        - Issuers
      summary: Issuers list
      description: Returns a list of issuers
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/issuers" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Issuers list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuers'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Issuers
      summary: New issuer
      description: Creates a new order issuer
      requestBody:
        description: Issuer to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issuer'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/issuers" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created issuer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/issuers/{id}':
    get:
      tags:
        - Issuers
      summary: Issuer info
      description: Returns data about existing issuer (demands issuer ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Issuer ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/issuers/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Issuer info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Issuers
      summary: Issuer update
      description: Modify a existing issuer (demands issuer ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Issuer ID
      requestBody:
        description: Issuer to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issuer'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/issuers/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Modified issuer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /installmentplans:
    get:
      tags:
        - Installment Plans
      summary: Installment plans list
      description: Returns a list of installment plans
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/installmentplans" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Installment plans list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallmentPlans'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Installment Plans
      summary: New installment plan
      description: Creates a new installment plan
      requestBody:
        description: Installment plan to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstallmentPlan'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/installmentplans" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created installment plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallmentPlan'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/installmentplans/{id}':
    get:
      tags:
        - Installment Plans
      summary: Installment plans info
      description: Returns data about existing installment plan (demands installment plan ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Installment plan ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/installmentplans/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Installment plan info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallmentPlan'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Installment Plans
      summary: Installment plan update
      description: Modify a existing installment plan (demands installment plan ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Installment plan ID
      requestBody:
        description: Installment plan to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstallmentPlan'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/installmentplans/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Installment plan modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallmentPlan'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /planpaymentmethods:
    get:
      tags:
        - Payment Plan Methods
      summary: Payment plan methods list
      description: Returns a list of payment plan methods
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/planpaymentmethods" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/planpaymentmethods?filter={"id_plano":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Payment plan methods list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPlanMethods'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Payment Plan Methods
      summary: New payment plan method
      description: Creates a new payment plan method
      requestBody:
        description: Payment plan method to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentPlanMethod'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/planpaymentmethods" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created payment plan method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPlanMethod'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/planpaymentmethods/{id}':
    get:
      tags:
        - Payment Plan Methods
      summary: Payment plan methods info
      description: Returns data about existing payment plan methods (demands payment plan method ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Payment plan method ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/planpaymentmethods/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Payment plan method info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPlanMethod'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Payment Plan Methods
      summary: Payment plan methods update
      description: Modify a existing payment plan methods (demands payment plan method ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Payment plan method ID
      requestBody:
        description: Payment plan method to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentPlanMethod'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/planpaymentmethods/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created payment plan method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPlanMethod'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /logs:
    get:
      tags:
        - Logs
      summary: Logs list
      description: Returns a list of api logs
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/logs" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/logs?filter={"user_id":123,"nome_usuario":"test","status_erro":false,"data_chamada":"2020-01-01"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: API logs list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logs'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/logs/{id}':
    get:
      tags:
        - Logs
      summary: Logs info
      description: Returns data about existing log (demands log ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Log ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/logs/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Log info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /helppages:
    get:
      tags:
        - Help Pages
      summary: Help pages list
      description: Returns a list of help pages
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/helppages" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/helppages?filter={"url_tela":"test"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Help pages list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelpPages'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /bankaccounts:
    get:
      tags:
        - Bank Accounts
      summary: Bank accounts list
      description: Returns a list of bank accounts
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/bankaccounts" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/bankaccounts?filter={"cpf_cnpj":123,"id_pessoa":456}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Bank accounts list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccounts'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Bank Accounts
      summary: New bank account
      description: Creates a new bank account
      requestBody:
        description: Bank account to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccount'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/bankaccounts" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created bank account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/bankaccounts/{id}':
    get:
      tags:
        - Bank Accounts
      summary: Bank account info
      description: Returns data about existing bank account (demands bank account ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Bank account ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/bankaccounts/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Bank account info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Bank Accounts
      summary: Bank account update
      description: Modify a existing bank account (demands bank account ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Bank account ID
      requestBody:
        description: Bank account to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccount'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/bankaccounts/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Updated bank account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /customercontacts:
    get:
      tags:
        - Customer Contacts
      summary: Customer contacts list
      description: Returns a list of customer contacts
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/customercontacts" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/customercontacts?filter={"id_pessoa":123,"inativos":false}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Customer contacts list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerContacts'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Customer Contacts
      summary: New customer contact
      description: Creates a new customer contact
      requestBody:
        description: Customer contact to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerContact'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/customercontacts" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created customer contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerContact'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/customercontacts/{id}':
    get:
      tags:
        - Customer Contacts
      summary: Customer contact info
      description: Returns data about existing customer contact (demands customer contact ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Customer contact ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/customercontacts/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Customer contact info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerContact'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Customer Contacts
      summary: Customer contact update
      description: Modify a existing customer contact (demands customer contact ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Customer contact ID
      requestBody:
        description: Customer contact to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerContact'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/customercontacts/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Updated customer contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerContact'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /userauths:
    get:
      tags:
        - User Auths
      summary: User auths list
      description: Returns a list of user auths
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/userauths" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/userauths?filter={"user_id":123,"id_empresa":456}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: User auths list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuths'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /useremails:
    get:
      tags:
        - User Emails
      summary: User emails list
      description: Returns a list of user emails
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/useremails" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/useremails?filter={"desvinculados":true,"inativos":false}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: User emails list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEmails'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/useremails/{id}':
    delete:
      tags:
        - User Emails
      summary: User email delete
      description: Delete a user email from the system
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User email ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X DELETE "https://rnge.com.br:8091/v2/useremails/123" --user ${user_id}:${token} | jq .
  /dashboards:
    get:
      tags:
        - Dashboards
      summary: Dashboards list
      description: Returns a list of dashboards
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/dashboards" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/dashboards?filter={"tipo":"test","inativos":false}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: User emails list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboards'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Dashboards
      summary: New dashboard
      description: Creates a new dashboard
      requestBody:
        description: Dashboard to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/dashboards" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created dashboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/dashboards/{id}':
    get:
      tags:
        - Dashboards
      summary: Dashboard info
      description: Returns data about existing Dashboard (demands dashboard ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Dashboard ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/dashboards/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Dashboard info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Dashboards
      summary: Dashboard update
      description: Modify a existing dashboard (demands dashboard ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Dashboard ID
      requestBody:
        description: Dashboard to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/dashboards/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Updated dashboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /cashbalances:
    get:
      tags:
        - Cash Balances
      summary: Cash balances list
      description: Returns a list of cash balances
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/cashbalances" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/cashbalances?filter={"data_abertura":"2000-01-01","id_empresa":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Cash balances list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashBalances'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /scmconfigs:
    get:
      tags:
        - SCM Configs
      summary: SCM configs list
      description: Returns a list of SCM configs
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/scmconfigs" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/scmconfigs?filter={"todas":true}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: SCM configs list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmConfigs'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /skustocksummaries:
    get:
      tags:
        - Sku Stock Summaries
      summary: Sku stock summaries list
      description: Returns a list of sku stock summaries
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/skustocksummaries" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/skustocksummaries?filter={"cod_sku":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Sku stock summaries list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkuStockSummaries'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /imports:
    get:
      tags:
        - Imports
      summary: Imports list
      description: Returns a list of imports
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/imports" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/imports?filter={"inativas":false}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Imports list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Imports'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Imports
      summary: New import
      description: Creates a new import
      requestBody:
        description: Import to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Import'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/imports" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created import
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Import'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /importfees:
    get:
      tags:
        - Import Fees
      summary: Imports list
      description: Returns a list of imports
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/importfees" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/importfees?filter={"import_id":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Import fees list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportFees'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /importadditions:
    get:
      tags:
        - Import Additions
      summary: Import additions list
      description: Returns a list of import additions
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/importadditions" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/importadditions?filter={"import_id":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Import additions list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportAdditions'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Import Additions
      summary: New import addition
      description: Creates a new import addition
      requestBody:
        description: Import addition to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAddition'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/importadditions" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created import addition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportAddition'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/importadditions/{id}':
    get:
      tags:
        - Import Additions
      summary: Import addition info
      description: Returns data about existing import addition (demands import ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Import ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/importadditions/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Import addition info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportAddition'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Import Additions
      summary: Import addition update
      description: Modify a existing import addition (demands import ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Import ID
      requestBody:
        description: Import addition to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAddition'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/importadditions/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Updated import addition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportAddition'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    delete:
      tags:
        - Import Additions
      summary: Import addition delete
      description: Removes a import additions from the system
      parameters:
        - name: id
          in: path
          description: Import ID
          schema:
            type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X DELETE https://rnge.com.br:8091/v2/importadditions/123 --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Import addition deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportAddition'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /importadditiontaxes:
    get:
      tags:
        - Import Addition Taxes
      summary: Import addition taxes list
      description: Returns a list of import addition taxes
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/importadditiontaxes" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/importadditiontaxes?filter={"addition_id":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Import addition taxes list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportAdditionTaxes'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /distributions:
    get:
      summary: Distribuição
      tags:
        - Distribuição
      responses:
        '200':
          description: |+

      operationId: get-distributions
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
            examples: {}
      description: 'Teste do get . '
      parameters:
        - schema:
            type: string
          in: query
          name: filter
        - schema:
            type: array
          in: query
          name: range
        - schema:
            type: array
          in: query
          name: sort
    post:
      summary: Cria uma nova distribuição
      operationId: post-distributions
      responses:
        '200':
          description: ''
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                ids_empresas:
                  type: array
                  description: Lista de empresas destino
                  items: {}
                numero_pedido:
                  type: integer
                  description: Nº do pedido que contém os itens que serão enviados
                tipo_distrib:
                  type: string
                  enum:
                    - NORMAL
                    - ABLOJA
                    - REVFND
                    - REVSNO
                  description: 'Tipo de distribuição (padrão: NORMAL)'
                gerar_pedidos:
                  type: boolean
                  description: 'Se TRUE, gera os pedidos após criar a distribuição'
                predio:
                  type: integer
                  description: 'Prédio de origem (padrão: CD)'
                codigo_sku:
                  type: integer
                  description: Código de um SKU para testes
                curva_minima_geral:
                  type: integer
                  description: Somente produtos desta curva para cima serão enviados
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
        description: ''
      parameters: []
      tags:
        - Distribuição
    parameters: []
components:
  securitySchemes:
    Basic QURNSU5AemV6aW5obzp6ZXVz:
      type: http
      scheme: basic
      description: 'ADMIN@zezinho:zeus'
    Basic MTIzNDp1dWlkLXRva2Vu:
      type: http
      scheme: basic
      description: '1234:uuid-token'
  schemas:
security:
  - Basic MTIzNDp1dWlkLXRva2Vu: []
