openapi: 3.0.0
servers:
  - url: 'https://rnge.com.br:8091/v2'
    description: Produção
  - url: 'https://10.10.1.239:8091/v2'
    description: Sandbox
info:
  description: |
    Our API follows REST standard and HTTP AuthBasic authentication in all resource calls, passing userid:token 
    in most resources except POST v2/login which uses username@tenant:senha. The response is almost always in JSON 
    format; some resources return other formats like XML or PDF.

    # DEFINITIONS

    **Tenant\:** it’s the customer’s account (eg:amazon). The tenant may have one or more companies (eg:stores).

    **User\:** Each user belongs to a tenant and has a globally unique user_id. The username is unique inside a tenant 
    (eg:jeff@amazon is different from jeff@mystore). He or she can have login access to one or more companies.

    # PATTERNS

    All GET must support at least the parameters "filter", "sort" and "range" in the following format:

     | Parameter  | Format | URL Query                                            | Resulting SELECT          |
     |------------|--------|------------------------------------------------------|---------------------------|
     | filter     |  JSON  | GET v2/resources?filter={"store":34,"inativo":true}  | ... WHERE store = 34      |
     | sort       |  CSV   | GET v2/resources?sort=["name","ASC"]                 | ... ORDER BY name, asc    |
     | range      |  CSV   | GET v2/resources?range=[0,9]                         | ... OFFSET 0 LIMIT 10     |

    # TOOLS

    The examples in this document use the curl command-line tool. It’s available on Linux via apt-get or similar.
    Windows version\: https://curl.haxx.se/windows/

    We use the jq command line tool for JSON formatting. It’s available on Linux via apt-get or similar.
    Windows version\: https://stedolan.github.io/jq/download/

     # Changes from v1

     | Action          | v1 request                                      | v2request                             |
     |-----------------|-------------------------------------------------|---------------------------------------|
     | Get list        | GET /pesqpedido/                                | GET v2/orders                         |
     | Get one record  | GET /consultapedido/123                         | GET v2/orders/123                     |
     | Get many        | -                                               | GET v2/orders?filter={ids:[123,456]}  |
     | Update a record | POST /pedido/ -d {“numped”:123, id_pessoa:9876} | PUT v2/orders/123 -d {id_pessoa:9876} |
     | Create a record | POST /pedido/ -d {id_pessoa:9876}               | POST v2/orders -d {id_pessoa:9876}    |
     | Delete a record | -                                               | DELETE v2/orders/123                  |
     

     | Other actions   | v1 request                                      | v2 request                                     |
     |-----------------|-------------------------------------------------|------------------------------------------------|
     | Cancel an order | POST /cancelapedido/123                         | POST v2/orders/123/cancel                      |
     | Change status   | POST /mudastatus/123 -d {status:510}            | POST v2/orders/123/status -d {status:510}      |
     | Create invoice  | POST /geranota/123                              | POST v2/orders/123/invoice                     |
     | Insert an item  | POST /pedidoitem/123 -d {idprod:5, qcom:1}      | POST v2/orders/123/items -d {idprod:5, qcom:1} |
  version: 2.0.0
  title: API do RNGE 4
  termsOfService: 'https://rednaxel.com/termos-de-uso'
  contact:
    name: Suporte
    email: suporte@rednaxel.com
    url: 'https://suporte.rednaxel.com'
  x-logo:
    url: 'https://storage.googleapis.com/rednaxel-dados/rednaxel-264.png'
    altText: Logo da Rednaxel
tags:
  - name: Login
    description: |
      This is the first step in order to use API.
  - name: Images
    description: |
      This resource can save images for company logo, product image and danfe’s image. The image file must be jpeg or png. 
      **Warning\:** images for danfe **must be in jpeg** format and for logo **must be in png** format. All 
      images must have more than 1 Kb and less than 1 Mb.
  - name: Distribuição
  - name: Pessoas
  - name: Addresses
paths:
  /login:
    post:
      tags:
        - Login
      summary: Sing in the user on the system
      description: Authenticates the user on the system
      parameters:
        - name: user
          in: path
          description: |
            Username for the account.
          required: true
          schema:
            type: string
        - name: tenant
          in: path
          description: |
            The customer account.
          required: true
          schema:
            type: string
        - name: password
          in: path
          description: |
            It's the user's password.
          required: true
          schema:
            type: string
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST https://rnge.com.br:8091/v2/login --user ${user}@${tenant}:${password} | jq .
      responses:
        '200':
          description: |
            The credencials for the API. The third party app must save the fields `user_id` and `token` in order to use in all calls. 
            In this  documentation this fields will be quoted as ID:token for now on.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /cashiers:
    get:
      tags:
        - Cashiers
      summary: POS list
      description: Returns a list of POS (point of sale) devices of all tenant’s companies
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET https://rnge.com.br:8091/v2/cashiers --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/cashiers?filter={"num_serie":"1002","id_empresa":5623}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Array of POS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cashiers'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Cashiers
      summary: New POS
      description: Will create a new POS device on the system
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST https://rnge.com.br:8091/v2/cashiers --user ${user_id}:${token} -d payload.json | jq .
      requestBody:
        $ref: '#/components/requestBodies/CashiersPost'
      responses:
        '200':
          description: Success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashierResp'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/cashiers/{pdv_id}':
    get:
      tags:
        - Cashiers
      summary: POS info
      description: Returns all data about a specific POS device
      parameters:
        - name: pdv_id
          in: path
          schema:
            type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/cashiers/${pdv_id}" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: POS info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cashier'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Cashiers
      summary: POS update
      description: Updates data of a specific POS device
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT https://rnge.com.br:8091/v2/cashiers/1554 --user ${user_id}:${token} -d payload.json | jq .
      requestBody:
        $ref: '#/components/requestBodies/CashiersPut'
      responses:
        '200':
          description: Success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashierResp'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    delete:
      tags:
        - Cashiers
      summary: POS delete
      description: Removes a POS device from the system
      parameters:
        - name: pdv_id
          in: path
          description: POS ID
          schema:
            type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X DELETE https://rnge.com.br:8091/v2/cashiers/1778 --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Info about deleted POS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cashier'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/images/produto/{code}':
    post:
      tags:
        - Images
      summary: Product image upload
      description: Uploads an image for the product
      parameters:
        - name: code
          in: path
          description: Product code
          schema:
            type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST https://rnge.com.br:8091/v2/images/produto/10373 --user ${user_id}:${token} --data-urlencode imagem@file.jpg | jq .
      responses:
        '200':
          description: URL on the cloud
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Images'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/images/produto/{code}/{position}':
    post:
      tags:
        - Images
      summary: Product image upload position
      description: Uploads one more image for the same product
      parameters:
        - name: code
          in: path
          description: Product code
          schema:
            type: integer
        - name: position
          in: path
          description: ID for the image on the same product
          schema:
            type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST https://rnge.com.br:8091/v2/images/produto/10373/1 --user ${user_id}:${token} --data-urlencode imagem@file.jpg | jq .
      responses:
        '200':
          description: URL on the cloud
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesPos'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/images/logo/{company}':
    post:
      tags:
        - Images
      summary: Company logo image upload
      description: Uploads an image for the company logo. If `company` is greater than 0 is possible to upload more than one image for the same company
      parameters:
        - name: company
          in: path
          description: Company ID
          schema:
            type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST https://rnge.com.br:8091/v2/images/logo/0 --user ${user_id}:${token} --data-urlencode imagem@file.png | jq .
      responses:
        '200':
          description: URL on the cloud
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesLogo'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/images/danfe/{root_cnpj}':
    post:
      tags:
        - Images
      summary: DANFE image upload
      description: Uploads an image for danfe document (this document is specific for Brazil)
      parameters:
        - name: root_cnpj
          in: path
          description: Common part for the company ID when it has multiples branch offices
          schema:
            type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST https://rnge.com.br:8091/v2/images/danfe/5563868 --user ${user_id}:${token} --data-urlencode imagem@file.jpg | jq .
      responses:
        '200':
          description: URL on the cloud
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesDanfe'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/images/danfe/{root_cnpj}/{company}':
    post:
      tags:
        - Images
      summary: DANFE image upload for a company
      description: Uploads an image for danfe document (this document is specific for Brazil) on a specific company
      parameters:
        - name: root_cnpj
          in: path
          description: Common part for the company ID when it has multiples branch offices
          schema:
            type: integer
        - name: company
          in: path
          description: Company ID
          schema:
            type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST https://rnge.com.br:8091/v2/images/danfe/5563868/1596 --user ${user_id}:${token} --data-urlencode imagem@file.jpg | jq .
      responses:
        '200':
          description: URL on the cloud
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesDanfeCo'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /orders:
    get:
      tags:
        - Orders
      summary: Orders list
      description: Returns a list of orders
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      responses:
        '200':
          description: Array of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedidos'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/orders" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/orders?filter={"id_empresa":3475,"cnpj_emit":4754268000170}' --user ${user_id}:${token} | jq .
    post:
      tags:
        - Orders
      summary: New order
      description: Creates a new order returning the order's ID
      requestBody:
        description: Order to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovoPedido'
      responses:
        '200':
          description: Created order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedidos'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/orders --user ${user_id}:${token} -d payload.json | jq .'
  '/orders/{numped}':
    put:
      tags:
        - Orders
      summary: Order update
      description: Modify a existing order (demands order number)
      parameters:
        - in: path
          name: numped
          schema:
            type: integer
          required: true
          description: Order number
      requestBody:
        description: Order to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovoPedido'
      responses:
        '200':
          description: Order modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedidos'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    get:
      tags:
        - Orders
      summary: Order info
      description: Returns data about existing order (demands order number)
      parameters:
        - in: path
          name: orderID
          schema:
            type: integer
          required: true
          description: Order number
      responses:
        '200':
          description: Order data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedidos'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/orders/277519 --user ${user_id}:${token} | jq .'
  '/orders/{numped}/cancel':
    post:
      tags:
        - Orders
      summary: Order cancel
      description: It cancels an order (demands order number)
      parameters:
        - in: path
          name: numped
          schema:
            type: integer
          required: true
          description: Order number
      responses:
        '200':
          description: Canceled order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PedidoCancelado'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/orders/284231/cancel --user ${user_id}:${token} | jq .'
  '/orders/{numped}/items':
    post:
      tags:
        - Orders
      summary: Order items
      description: It inserts a product in an order (demands order number)
      parameters:
        - in: path
          name: numped
          schema:
            type: integer
          required: true
          description: Order number
      requestBody:
        description: Product to be inserted
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItems'
      responses:
        '200':
          description: Inserted product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/orders/123456/items --user ${user_id}:${token} -d payload.json | jq .'
  '/orders/{numped}/status':
    post:
      tags:
        - Orders
      summary: Order status
      description: Will change the order's status (demands order number)
      parameters:
        - in: path
          name: numped
          schema:
            type: integer
          required: true
          description: Order number
      requestBody:
        description: Aditional information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatus'
      responses:
        '200':
          description: Order's status changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/orders/123456/status --user ${user_id}:${token} -d payload.json | jq .'
    get:
      tags:
        - Orders
      summary: Order status
      description: Returns the possible status for an order (demands order number)
      parameters:
        - in: path
          name: orderID
          schema:
            type: integer
          required: true
          description: Order number
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/orders/179925/status" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Possible status list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusGet'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/orders/{numped}/sync':
    put:
      tags:
        - Orders
      summary: Order sync
      description: Order's update (demands order number)
      parameters:
        - in: path
          name: numped
          schema:
            type: integer
          required: true
          description: Order number
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/orders/179925/sync" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Flag 'atualizarerp' is false
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/orders/{numped}/verify':
    get:
      tags:
        - Orders
      summary: Order verify
      description: Shows complete information about an order (demands order number)
      parameters:
        - in: path
          name: numped
          schema:
            type: integer
          required: true
          description: Order number
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/orders/179925/verify" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Information about an order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusVerify'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /batches:
    post:
      tags:
        - Batches
      summary: Batches
      description: Generate batche invoices
      requestBody:
        $ref: '#/components/requestBodies/BatchesPost'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/batches" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Receipt number
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchesPostResult'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /companies:
    get:
      tags:
        - Companies
      summary: Companies list
      description: Returns a list of companies
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/companies" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/companies?filter={"id_empresa":3476}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Company information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Companies'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Companies
      summary: New company
      description: Creates a new company returning the company's ID
      requestBody:
        description: Company to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovaEmpresa'
      responses:
        '200':
          description: Created company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empresa'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/companies --user ${user_id}:${token} -d payload.json | jq .'
  '/companies/{idempresa}':
    put:
      tags:
        - Companies
      summary: Company update
      description: Modify a existing company (demands company ID)
      parameters:
        - in: path
          name: idempresa
          schema:
            type: integer
          required: true
          description: Company ID
      requestBody:
        description: Company to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovaEmpresa'
      responses:
        '200':
          description: Updated company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empresa'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X PUT https://rnge.com.br:8091/v2/companies/176542 --user ${user_id}:${token} -d payload.json | jq .'
    get:
      tags:
        - Companies
      summary: Company info
      description: Returns data about existing company (demands company ID)
      parameters:
        - in: path
          name: idempresa
          schema:
            type: integer
          required: true
          description: Company ID
      responses:
        '200':
          description: Company information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyInfo'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X GET https://rnge.com.br:8091/v2/companies/176542 --user ${user_id}:${token} | jq .'
  /certificates:
    get:
      tags:
        - Certificates
      summary: Certificates list
      description: Returns a list of certificates
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/certificates" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/certificates?filter={"raiz_cnpj":47542680}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Certificate information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificates'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/certificates/{raiz_cnpj}':
    get:
      tags:
        - Certificates
      summary: Certificate info
      description: Returns data about specific certificate (demands root company ID)
      parameters:
        - in: path
          name: raiz_cnpj
          schema:
            type: integer
          required: true
          description: Root company ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/certificates/47542680" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Certificate information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /contacttypes:
    get:
      tags:
        - Contact types
      summary: Contact types list
      description: Returns a list of contact types
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/contacttypes" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/contacttypes?filter={"descricao_tipo":"test"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Contact type information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacttypes'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/contacttypes/{id}':
    get:
      tags:
        - Contact types
      summary: Contact types info
      description: Returns data about specific contact type (demands contact type ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Contact type ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/contacttypes/1234" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Contact type information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contacttype'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /slips:
    get:
      tags:
        - Slips
      summary: Slips list
      description: Returns a list of slips
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/slips" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/slips?filter={"chnfe":"43170102505657000136550010011145821111011012","datafim":"2020-01-20","dataini":"2019-12-20","cnpj_emit":4754268000170,"id_empresa":0,"id_pessoa":0,"nome_razao":"test","pdv":0,"numero":0,"total_vnf":0.00,"formas_pagto":"test"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Slip information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slips'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Slips
      summary: Record slip
      description: Record a slip on cloud
      requestBody:
        description: Slip to be recorded
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovoCupom'
      responses:
        '200':
          description: Recorded slip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/slips --user ${user_id}:${token} -d payload.json | jq .'
  /slips/reasons:
    post:
      tags:
        - Slips
      summary: Slip update
      description: Insert extra data in slip's items
      requestBody:
        description: Extra data to be inserted
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovoItem'
      responses:
        '200':
          description: Inserted extra data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/slips/reasons --user ${user_id}:${token} -d payload.json | jq .'
  /recharges:
    get:
      tags:
        - Recharges
      summary: Reacharge list
      description: Returns a list of pending recharges
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/recharges" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Recharges information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recharges'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /customers:
    get:
      tags:
        - Customers
      summary: Customers list
      description: Returns a list of customers
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/customers" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/customers?filter={"id":3545,"nome":"test","inativos":true,"ids":[0,1,2],"q":"st"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Customer information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customers'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Customers
      summary: New customers
      description: Creates a new customer
      requestBody:
        description: Customer to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/customers --user ${user_id}:${token} -d payload.json | jq .'
  '/customers/{id}':
    get:
      tags:
        - Customers
      summary: Customer info
      description: Returns data about existing customer (demands customer ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Customer ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/customers/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Customer information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Customers
      summary: Customer update
      description: Modify a existing customer (demands customer ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Customer ID
      requestBody:
        description: Customer to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      x-code-samples:
        - lang: bash
          source: 'curl -s -X POST https://rnge.com.br:8091/v2/customers/123 --user ${user_id}:${token} -d payload.json | jq .'
    delete:
      tags:
        - Customers
      summary: Customer desable
      description: Deactivates a customer on the system (demands customer ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Customer ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X DELETE "https://rnge.com.br:8091/v2/customers/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Customer information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /customers/import:
    post:
      tags:
        - Customers Import
      summary: Customers import
      description: Import's customers to the system
      requestBody:
        description: Customer to be imported
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerImport'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/customers/import" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /customerphones:
    get:
      tags:
        - Customer Phones
      summary: Customer phones list
      description: Returns a list of customer phones
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/customerphones" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/customerphones?filter={"id":1,"id_pessoa":123,"inativos":false}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Purchase information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPhones'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /customertransactions:
    get:
      tags:
        - Customer Transactions
      summary: Customer transactions list
      description: Returns a list of customer transactions
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/customertransactions" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/customertransactions?filter={"id_pessoa":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Customer transactions information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerTransactions'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /customeremails:
    get:
      tags:
        - Customer Emails
      summary: Customer e-mails list
      description: Returns a list of customer e-mails
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/customeremails" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/customeremails?filter={"id":123,"eh_pessoal":true,"eh_favorito":false,"recebe_danfe":true}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Customer e-mails information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerEmails'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Customer Emails
      summary: New customer e-mail
      description: Creates a new customer e-mail
      requestBody:
        description: Customer e-mail to be imported
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerEmail'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/customeremails" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/customeremails/{id}':
    get:
      tags:
        - Customer Emails
      summary: Customer e-mail info
      description: Returns data about existing customer e-mail (demands person ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Person ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/customeremails/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Customer e-mail information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerEmail'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /addresses:
    get:
      tags:
        - Pessoas
      summary: Lista de endereços
      description: Retorna a lista de endereços de uma pessoa (filtro `id_pessoa` int64) ou a lista de endereços das lojas de uma rede (filtro `cliente_retira` bool). O filtro `cliente_retira` tem prioridade sobre os demais.
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/addresses" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/addresses?filter={"id":123,"id_pessoa":456,"inativos":false}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Addresses information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Addresses
      summary: New address
      description: Creates a new address returning the address's ID
      requestBody:
        description: Address to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/addresses" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Address ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/addresses/{id}':
    get:
      tags:
        - Pessoas
      summary: Address info
      description: Returns data about existing address (demands address ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Address ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/addresses/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Address information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Addresses
      summary: Address update
      description: Modify a existing address (demands address ID)
      requestBody:
        description: Address to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/addresses/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Address ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    delete:
      tags:
        - Addresses
      summary: Address desable
      description: Deactivates an address on the system (demands address ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Customer ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X DELETE "https://rnge.com.br:8091/v2/addresses/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Address ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /addresstypes:
    get:
      tags:
        - Pessoas
      summary: Address types list
      description: Returns a list of address types
      parameters:
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/addresstypes" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Address types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressTypes'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/addresstypes/{id}':
    get:
      tags:
        - Pessoas
      summary: Address types info
      description: Returns data about existing address type (demands address type ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Address type ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/addresstypes/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Address type info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressType'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /phonetypes:
    get:
      tags:
        - Phone Types
      summary: Phone types list
      description: Returns a list of phone types
      parameters:
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/phonetypes" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Phone types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneTypes'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /purchases:
    get:
      tags:
        - Purchases
      summary: Purchases list
      description: Returns a list of purchases
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/purchases" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/purchases?filter={"id_pessoa":12345,"serie":123,"nunmero":4567,"cod_sku":45,"nome_fornec":"teste","dataini":"2020-01-01","datafim":"2020-01-05"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Purchase information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchases'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Purchases
      summary: Insert purchase
      description: Insert invoice's files on the system
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/purchases" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /purchaseitems:
    get:
      tags:
        - Purchase Items
      summary: Purchase items list
      description: Returns a list of purchase items
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/purchaseitems" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/purchaseitems?filter={"id_compra":12345}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Purchase items information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseItems'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Purchase Items
      summary: New purchase item
      description: Creates a new purchase item
      requestBody:
        description: Purchase item to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseItem'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/purchaseitems" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created purchase item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseItem'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/purchaseitems/{id}':
    get:
      tags:
        - Purchase Items
      summary: Purchase item info
      description: Returns data about existing purchase item (demands purchase item ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Purchase item ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/purchaseitems/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Purchase item info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseItem'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Purchase Items
      summary: Purchase item update
      description: Modify a existing purchase item (demands purchase item ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Purchase item ID
      requestBody:
        description: Purchase item to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseItem'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/purchaseitems/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Purchase item modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseItem'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /carriers:
    get:
      tags:
        - Carriers
      summary: Carriers list
      description: Returns a list of carriers
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/carriers" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/carriers?filter={"nome_entregador":"teste","inativos":false,"id_empresa":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Carriers list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carriers'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Carriers
      summary: New carrier
      description: Creates a new carrier
      requestBody:
        description: Carrier to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Carrier'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/carriers" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created carrier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carrier'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/carriers/{id}':
    get:
      tags:
        - Carriers
      summary: Carrier info
      description: Returns data about existing carrier (demands carrier ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Carrier ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/carriers/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Carrier info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carrier'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Carriers
      summary: Carrier update
      description: Modify a existing carrier (demands carrier ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Carrier ID
      requestBody:
        description: Carrier to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Carrier'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/carriers/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Modified carrier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carrier'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /invoices:
    post:
      tags:
        - Invoices
      summary: Save invoice
      description: Sends an invoice XML to the cloud
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/invoices" --user ${user_id}:${token} --data-urlencode xml@invoice.xml | jq .
      responses:
        '200':
          description: Array of orders numbers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoices'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/invoices/{id}':
    put:
      tags:
        - Invoices
      summary: Invoice processing
      description: Loads an invoice from the cloud and process again
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Eletronic invoice's access key (chnfe)
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/invoices/43200105563868000113550200000117011814560946" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/invoices/{id}/events':
    post:
      tags:
        - Invoices
      summary: Event generation
      description: |
        Based on id sufix some events can be generated: If event type is 0 and id has sufix "0000000000" the 'disable' event will be generated. If event type is 110111
        the 'canceled' event will be generated. If event type is 110110 the 'retification letter' will be generated.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Eletronic invoice's access key (chnfe)
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/invoices/43200105563868000113550200000117011814560946/events" --user ${user_id}:${token} -d payload.json | jq .
      requestBody:
        description: Event data to be generated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeraEvento'
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/invoices/{id}/emails':
    post:
      tags:
        - Invoices
      summary: Sends e-mail
      description: Sends invoice XML and 'Danfe' (eletronic invoice auxiliary document) PDF by e-mail
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Eletronic invoice's access key (chnfe)
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/invoices/43180405563868000113657010000015301325665758/emails" --user ${user_id}:${token} | jq .
            curl -s -X POST "https://rnge.com.br:8091/v2/invoices/43180405563868000113657010000015301325665758/emails?para=johndoe@gmail.com" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /emailtemplates:
    get:
      tags:
        - Email Templates
      summary: Email templates list
      description: Returns a list of email templates
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/emailtemplates" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Array of email templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplates'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Email Templates
      summary: New email template
      description: Creates a new email template
      requestBody:
        description: Email template to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEmailTemplate'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/emailtemplates" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Email template created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplate'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/emailtemplates/{id}':
    put:
      tags:
        - Email Templates
      summary: Email template update
      description: Modify a existing email template (demands email template ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Email template ID
      requestBody:
        description: Email template to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEmailTemplate'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/emailtemplates/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Email template modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplate'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /catalogs:
    get:
      tags:
        - Catalogs
      summary: Catalogs list
      description: Returns a list of catalogs
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/catalogs" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/catalogs?filter={"inativos":true}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Array of catalogs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalogs'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Catalogs
      summary: New catalog
      description: Creates a new catalog
      requestBody:
        description: Catalog to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Catalog'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/catalogs" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Catalog created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/catalogs/{id}':
    get:
      tags:
        - Catalogs
      summary: Catalogs info
      description: Returns data about existing catalog (demands catalog ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Catalog ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/catalogs/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Catalog info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Catalogs
      summary: Catalog update
      description: Modify a existing catalog (demands catalog ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Catalog ID
      requestBody:
        description: Catalog to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Catalog'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/catalogs/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Catalog modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    delete:
      tags:
        - Catalogs
      summary: Catalog delete
      description: Delete a catalog from the system
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Catalog ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X DELETE "https://rnge.com.br:8091/v2/catalogs/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Catalog deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/catalogs/{id}/categories':
    get:
      tags:
        - Catalogs
      summary: Catalog's categories list
      description: Returns a list of catalog's categories
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Catalog ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/catalogs/123/categories" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Catalog categories list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCategories'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /categories:
    get:
      tags:
        - Categories
      summary: Categories list
      description: Returns a list of categories
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/categories" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/categories?filter={"catalog_id":123,"parent_id":546,"q":"test","vinculavel":true,"ids":[789,1011]}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Categories list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categories'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/categories/{id}':
    get:
      tags:
        - Categories
      summary: Category info
      description: Returns data about existing category (demands category ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Category ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/categories/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Category info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCategory'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /categorylinks:
    get:
      tags:
        - Category Links
      summary: Category links list
      description: Returns a list of category links
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/categorylinks" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/categorylinks?filter={"catalog_id":123,"breadcrumb":"test","q":"test"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Category links list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogLinks'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Category Links
      summary: New category link
      description: Creates a new category link
      requestBody:
        description: Category link to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCategoryLink'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/categorylinks" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Category link created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCategoryLink'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/categorylinks/{id}':
    get:
      tags:
        - Category Links
      summary: Category link info
      description: Returns data about existing category link (demands category link ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Category link ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/categorylinks/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Category links info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogLink'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Category Links
      summary: Category link update
      description: Modify a existing category link (demands category link ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Category link ID
      requestBody:
        description: Category link to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCategoryLink'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/categorylinks/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Category link modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCategoryLink'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /contracts:
    get:
      tags:
        - Contracts
      summary: Contracts list
      description: Returns a list of contracts
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/contracts" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/contracts?filter={"id_pessoa":123,"inativos":true}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Contracts list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contracts'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/contracts/{id}':
    get:
      tags:
        - Contracts
      summary: Contract info
      description: Returns data about existing contract (demands contract ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Contract ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/contracts/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Contract info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Contracts
      summary: Contract update
      description: Modify a existing order (demands contract ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Contract ID
      requestBody:
        description: Contract to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contract'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/contracts/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Contract modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /paymenttypes:
    get:
      tags:
        - Payment Types
      summary: Payment types list
      description: Returns a list of payment types
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/paymenttypes" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/paymenttypes?filter={"inativos":true}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Payment types list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTypes'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /suppliers:
    get:
      tags:
        - Suppliers
      summary: Suppliers list
      description: Returns a list of suppliers
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/suppliers" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/suppliers?filter={"inativos":true,"nome_fornec":"test"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Suppliers list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Suppliers'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/suppliers/{id:}':
    get:
      tags:
        - Suppliers
      summary: Suppliers info
      description: Returns data about existing supplier (demands supplier ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Supplier ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/suppliers/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Supplier info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /tasks:
    get:
      tags:
        - Tasks
      summary: Tasks list
      description: Returns a list of tasks
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/tasks" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/tasks?filter={"coluna":1,"user_id":234,"task_id":567}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Tasks list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /skus:
    get:
      tags:
        - Skus
      summary: Skus list
      description: Returns a list of skus (Stock Keeping Units)
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/skus" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/skus?filter={"codigo":123,"id_categ":456,"inativos":false,"ncm_vencido":true,"q":"test"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Skus list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skus'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/skus/{id}':
    get:
      tags:
        - Skus
      summary: Sku info
      description: Returns data about existing sku (demands sku ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Sku ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/skus/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Sku info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sku'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /skuarticles:
    get:
      tags:
        - Sku Articles
      summary: Sku articles list
      description: Returns a list of sku (Stock Keeping Units) articles
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/skuarticles" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/skuarticles?filter={"sku_id":123,"codigo_descricao":"test","fornecedor":"abc","marca":"def","id_categ":456,"nivel":789,"categoria":"test","fora_venda":false,"embalagens":false,"referencia":"ghi","ncm":"jkl"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Sku articles list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkuArticles'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /skustocks:
    get:
      tags:
        - Sku Stocks
      summary: Sku stocks list
      description: Returns a list of sku (Stock Keeping Units) stocks
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/skustocks" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/skustocks?filter={"cod_sku":123,"sku_id":456,"todos":true,"id_predio":789}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Sku stocks list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkuStocks'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /skutrends:
    get:
      tags:
        - Sku Trends
      summary: Sku trends list
      description: Returns a list of sku (Stock Keeping Units) trends
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/skustrends" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/skustrends?filter={"sku_id":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Sku trends list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkusTrends'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /skucurves:
    get:
      tags:
        - Sku Curves
      summary: Sku curves list
      description: Returns a list of sku (Stock Keeping Units) curves
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/skucurves" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/skucurves?filter={"cod_sku":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Sku curvves list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkuCurves'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /skucmms:
    get:
      tags:
        - Sku Cmms
      summary: Sku cmms list
      description: Returns a list of sku (Stock Keeping Units) cmms
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/skucmms" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/skucmms?filter={"sku_id":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Sku cmms list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkuCmms'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /incompleteopenings:
    get:
      tags:
        - Incomplete Openings
      summary: Incomplete openings list
      description: Returns a list of incomplete openings
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/incompleteopenings" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Incomplete openings list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncompleteOpenings'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/incompleteopenings/{id}':
    get:
      tags:
        - Incomplete Openings
      summary: Incomplete openings info
      description: Returns data about existing incomplete opening (demands opening ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Opening ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/incompleteopenings/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Incomplete openings info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncompleteOpening'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /reasons:
    get:
      tags:
        - Reasons
      summary: Reasons list
      description: Returns a list of reasons
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/reasons" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/reasons?filter={"tipo":123,"inativos":false}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Reason created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reasons'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Reasons
      summary: New reason
      description: Creates a new reason
      requestBody:
        description: Reason to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reason'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/reasons" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Reason created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/reasons/{id}':
    get:
      tags:
        - Reasons
      summary: Reason info
      description: Returns data about existing reason (demands reason ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Reason ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/reasons/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Reason info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Reasons
      summary: Reason update
      description: Modify a existing order (demands reason ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Reason ID
      requestBody:
        description: Reason to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reason'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/reasons/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Reason modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /parameters:
    get:
      tags:
        - Parameters
      summary: Parameters list
      description: Returns a list of parameters
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/parameters" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/parameters?filter={"escopo":"test","tipo_config":"test","nome_param":"test"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Parameter list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parameters'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/parameters/{id}':
    get:
      tags:
        - Parameters
      summary: Parameter info
      description: Returns data about existing parameter (demands parameter ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Parameter ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/parameter/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Reason created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parameter'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Parameters
      summary: Parameter update
      description: Modify a existing parameter (demands parameter ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Parameter ID
      requestBody:
        description: Parameter be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Parameter'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/parameters/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /barcodes:
    get:
      tags:
        - Barcodes
      summary: Barcodes list
      description: Returns a list of barcodes
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/barcodes" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/barcodes?filter={"cod_produto":123,"cod_sku":456}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Barcodes list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Barcodes'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/barcodes/{id}':
    get:
      tags:
        - Barcodes
      summary: Barcodes info
      description: Returns data about existing barcode (demands barcode ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Barcode ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/barcodes/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Barcodes list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Barcode'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /issuers:
    get:
      tags:
        - Issuers
      summary: Issuers list
      description: Returns a list of issuers
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/issuers" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Issuers list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuers'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Issuers
      summary: New issuer
      description: Creates a new order issuer
      requestBody:
        description: Issuer to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issuer'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/issuers" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created issuer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/issuers/{id}':
    get:
      tags:
        - Issuers
      summary: Issuer info
      description: Returns data about existing issuer (demands issuer ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Issuer ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/issuers/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Issuer info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Issuers
      summary: Issuer update
      description: Modify a existing issuer (demands issuer ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Issuer ID
      requestBody:
        description: Issuer to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issuer'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/issuers/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Modified issuer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /installmentplans:
    get:
      tags:
        - Installment Plans
      summary: Installment plans list
      description: Returns a list of installment plans
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/installmentplans" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Installment plans list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallmentPlans'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Installment Plans
      summary: New installment plan
      description: Creates a new installment plan
      requestBody:
        description: Installment plan to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstallmentPlan'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/installmentplans" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created installment plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallmentPlan'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/installmentplans/{id}':
    get:
      tags:
        - Installment Plans
      summary: Installment plans info
      description: Returns data about existing installment plan (demands installment plan ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Installment plan ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/installmentplans/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Installment plan info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallmentPlan'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Installment Plans
      summary: Installment plan update
      description: Modify a existing installment plan (demands installment plan ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Installment plan ID
      requestBody:
        description: Installment plan to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstallmentPlan'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/installmentplans/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Installment plan modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallmentPlan'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /planpaymentmethods:
    get:
      tags:
        - Payment Plan Methods
      summary: Payment plan methods list
      description: Returns a list of payment plan methods
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/planpaymentmethods" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/planpaymentmethods?filter={"id_plano":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Payment plan methods list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPlanMethods'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Payment Plan Methods
      summary: New payment plan method
      description: Creates a new payment plan method
      requestBody:
        description: Payment plan method to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentPlanMethod'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/planpaymentmethods" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created payment plan method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPlanMethod'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/planpaymentmethods/{id}':
    get:
      tags:
        - Payment Plan Methods
      summary: Payment plan methods info
      description: Returns data about existing payment plan methods (demands payment plan method ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Payment plan method ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/planpaymentmethods/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Payment plan method info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPlanMethod'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Payment Plan Methods
      summary: Payment plan methods update
      description: Modify a existing payment plan methods (demands payment plan method ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Payment plan method ID
      requestBody:
        description: Payment plan method to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentPlanMethod'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/planpaymentmethods/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created payment plan method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPlanMethod'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /logs:
    get:
      tags:
        - Logs
      summary: Logs list
      description: Returns a list of api logs
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/logs" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/logs?filter={"user_id":123,"nome_usuario":"test","status_erro":false,"data_chamada":"2020-01-01"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: API logs list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logs'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/logs/{id}':
    get:
      tags:
        - Logs
      summary: Logs info
      description: Returns data about existing log (demands log ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Log ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/logs/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Log info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /helppages:
    get:
      tags:
        - Help Pages
      summary: Help pages list
      description: Returns a list of help pages
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/helppages" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/helppages?filter={"url_tela":"test"}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Help pages list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelpPages'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /bankaccounts:
    get:
      tags:
        - Bank Accounts
      summary: Bank accounts list
      description: Returns a list of bank accounts
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/bankaccounts" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/bankaccounts?filter={"cpf_cnpj":123,"id_pessoa":456}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Bank accounts list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccounts'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Bank Accounts
      summary: New bank account
      description: Creates a new bank account
      requestBody:
        description: Bank account to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccount'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/bankaccounts" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created bank account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/bankaccounts/{id}':
    get:
      tags:
        - Bank Accounts
      summary: Bank account info
      description: Returns data about existing bank account (demands bank account ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Bank account ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/bankaccounts/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Bank account info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Bank Accounts
      summary: Bank account update
      description: Modify a existing bank account (demands bank account ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Bank account ID
      requestBody:
        description: Bank account to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccount'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/bankaccounts/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Updated bank account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /customercontacts:
    get:
      tags:
        - Customer Contacts
      summary: Customer contacts list
      description: Returns a list of customer contacts
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/customercontacts" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/customercontacts?filter={"id_pessoa":123,"inativos":false}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Customer contacts list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerContacts'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Customer Contacts
      summary: New customer contact
      description: Creates a new customer contact
      requestBody:
        description: Customer contact to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerContact'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/customercontacts" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created customer contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerContact'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/customercontacts/{id}':
    get:
      tags:
        - Customer Contacts
      summary: Customer contact info
      description: Returns data about existing customer contact (demands customer contact ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Customer contact ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/customercontacts/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Customer contact info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerContact'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Customer Contacts
      summary: Customer contact update
      description: Modify a existing customer contact (demands customer contact ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Customer contact ID
      requestBody:
        description: Customer contact to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerContact'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/customercontacts/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Updated customer contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerContact'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /userauths:
    get:
      tags:
        - User Auths
      summary: User auths list
      description: Returns a list of user auths
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/userauths" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/userauths?filter={"user_id":123,"id_empresa":456}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: User auths list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuths'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /useremails:
    get:
      tags:
        - User Emails
      summary: User emails list
      description: Returns a list of user emails
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/useremails" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/useremails?filter={"desvinculados":true,"inativos":false}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: User emails list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEmails'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/useremails/{id}':
    delete:
      tags:
        - User Emails
      summary: User email delete
      description: Delete a user email from the system
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User email ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X DELETE "https://rnge.com.br:8091/v2/useremails/123" --user ${user_id}:${token} | jq .
  /dashboards:
    get:
      tags:
        - Dashboards
      summary: Dashboards list
      description: Returns a list of dashboards
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/dashboards" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/dashboards?filter={"tipo":"test","inativos":false}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: User emails list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboards'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Dashboards
      summary: New dashboard
      description: Creates a new dashboard
      requestBody:
        description: Dashboard to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/dashboards" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created dashboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/dashboards/{id}':
    get:
      tags:
        - Dashboards
      summary: Dashboard info
      description: Returns data about existing Dashboard (demands dashboard ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Dashboard ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/dashboards/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Dashboard info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Dashboards
      summary: Dashboard update
      description: Modify a existing dashboard (demands dashboard ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Dashboard ID
      requestBody:
        description: Dashboard to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/dashboards/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Updated dashboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /cashbalances:
    get:
      tags:
        - Cash Balances
      summary: Cash balances list
      description: Returns a list of cash balances
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/cashbalances" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/cashbalances?filter={"data_abertura":"2000-01-01","id_empresa":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Cash balances list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashBalances'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /scmconfigs:
    get:
      tags:
        - SCM Configs
      summary: SCM configs list
      description: Returns a list of SCM configs
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/scmconfigs" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/scmconfigs?filter={"todas":true}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: SCM configs list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmConfigs'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /skustocksummaries:
    get:
      tags:
        - Sku Stock Summaries
      summary: Sku stock summaries list
      description: Returns a list of sku stock summaries
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/skustocksummaries" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/skustocksummaries?filter={"cod_sku":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Sku stock summaries list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkuStockSummaries'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /imports:
    get:
      tags:
        - Imports
      summary: Imports list
      description: Returns a list of imports
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/imports" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/imports?filter={"inativas":false}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Imports list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Imports'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Imports
      summary: New import
      description: Creates a new import
      requestBody:
        description: Import to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Import'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/imports" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created import
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Import'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /importfees:
    get:
      tags:
        - Import Fees
      summary: Imports list
      description: Returns a list of imports
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/importfees" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/importfees?filter={"import_id":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Import fees list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportFees'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /importadditions:
    get:
      tags:
        - Import Additions
      summary: Import additions list
      description: Returns a list of import additions
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/importadditions" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/importadditions?filter={"import_id":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Import additions list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportAdditions'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    post:
      tags:
        - Import Additions
      summary: New import addition
      description: Creates a new import addition
      requestBody:
        description: Import addition to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAddition'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X POST "https://rnge.com.br:8091/v2/importadditions" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Created import addition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportAddition'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  '/importadditions/{id}':
    get:
      tags:
        - Import Additions
      summary: Import addition info
      description: Returns data about existing import addition (demands import ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Import ID
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/importadditions/123" --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Import addition info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportAddition'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    put:
      tags:
        - Import Additions
      summary: Import addition update
      description: Modify a existing import addition (demands import ID)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Import ID
      requestBody:
        description: Import addition to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAddition'
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X PUT "https://rnge.com.br:8091/v2/importadditions/123" --user ${user_id}:${token} -d payload.json | jq .
      responses:
        '200':
          description: Updated import addition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportAddition'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    delete:
      tags:
        - Import Additions
      summary: Import addition delete
      description: Removes a import additions from the system
      parameters:
        - name: id
          in: path
          description: Import ID
          schema:
            type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X DELETE https://rnge.com.br:8091/v2/importadditions/123 --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Import addition deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportAddition'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /importadditiontaxes:
    get:
      tags:
        - Import Addition Taxes
      summary: Import addition taxes list
      description: Returns a list of import addition taxes
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
      x-code-samples:
        - lang: Bash
          source: |
            curl -s -X GET "https://rnge.com.br:8091/v2/importadditiontaxes" --user ${user_id}:${token} | jq .
            curl -g -s -X GET 'https://rnge.com.br:8091/v2/importadditiontaxes?filter={"addition_id":123}' --user ${user_id}:${token} | jq .
      responses:
        '200':
          description: Import addition taxes list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportAdditionTaxes'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
  /distributions:
    get:
      summary: Distribuição
      tags:
        - Distribuição
      responses:
        '200':
          description: |2












































































              "id": 793,
              "datahora_geracao": "2020-12-09T15:03:46-03:00",
              "id_predio": 1,
              "desc_predio": "LAURO MULLER",
              "user_id": 10334,
              "nome_usuario": "JARDEL",
              "conclusao": 1,
              "lista_params": [
                {
                  "key": "crescimento_padrao",
                  "value": "1.00"
                },
                {
                  "key": "dias_suprimento",
                  "value": "30"
                },
                {
                  "key": "distrib_curva_minima",
                  "value": "9"
                },
                {
                  "key": "distrib_dias_faixa",
                  "value": "5"
                },
                {
                  "key": "distrib_mos_maximo",
                  "value": "0.20"
                },
                {
                  "key": "distrib_reversa_empresas",
                  "value": "[33]"
                },
                {
                  "key": "empresas",
                  "value": "[9]"
                },
                {
                  "key": "faixa_maxima_sazonal",
                  "value": "1"
                },
                {
                  "key": "indice_suprimento",
                  "value": "20"
                },
                {
                  "key": "itens_por_pedido",
                  "value": "50"
                },
                {
                  "key": "max_linhas_empresa",
                  "value": "15000"
                },
                {
                  "key": "pedido",
                  "value": "455695"
                },
                {
                  "key": "sempre_fracionar",
                  "value": "false"
                }
              ],
              "info_suprimento": {
                "cont_skus": 1,
                "cont_disp": 1,
                "pedidos": 0
              },
              "tipo": "NORMAL",
              "ativo": true
            }
      operationId: get-distributions
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
            examples: {}
      description: 'Teste do get . '
      parameters:
        - schema:
            type: string
          in: query
          name: filter
        - schema:
            type: array
          in: query
          name: range
        - schema:
            type: array
          in: query
          name: sort
    post:
      summary: Cria uma nova distribuição
      operationId: post-distributions
      responses:
        '200':
          description: ''
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                ids_empresas:
                  type: array
                  description: Lista de empresas destino
                  items: {}
                numero_pedido:
                  type: integer
                  description: Nº do pedido que contém os itens que serão enviados
                tipo_distrib:
                  type: string
                  enum:
                    - NORMAL
                    - ABLOJA
                    - REVFND
                    - REVSNO
                  description: 'Tipo de distribuição (padrão: NORMAL)'
                gerar_pedidos:
                  type: boolean
                  description: 'Se TRUE, gera os pedidos após criar a distribuição'
                predio:
                  type: integer
                  description: 'Prédio de origem (padrão: CD)'
                codigo_sku:
                  type: integer
                  description: Código de um SKU para testes
                curva_minima_geral:
                  type: integer
                  description: Somente produtos desta curva para cima serão enviados
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
        description: ''
      parameters: []
      tags:
        - Distribuição
    parameters: []
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    ImportAdditionTaxe:
      type: object
      properties:
        id:
          type: integer
          description: Import addition taxe ID
        addition_id:
          type: integer
          description: Addition ID
        tributo:
          type: string
          description: Taxe
        aliquota:
          type: float
          example: 0
          description: Aliquot
        valor:
          type: float
          example: 0
          description: Value
        base_calculo:
          type: float
          example: 0
          description: Calc base
    ImportAdditionTaxes:
      type: array
      items:
        $ref: '#/components/schemas/ImportAdditionTaxe'
    InfoAdicao:
      type: object
      properties:
        BCICMS:
          type: float
          example: 0
          description: null
    ImportAddition:
      type: object
      properties:
        id:
          type: integer
          description: Import addition ID
        import_id:
          type: integer
          description: Import ID
        num_adicao:
          type: integer
          description: Addition number
        ncm:
          type: string
          description: null
        moeda:
          type: string
          description: Currency
        vtotal_moeda:
          type: float
          example: 0
          description: Currency total value
        vaduaneiro:
          type: float
          example: 0
          description: Customs value
        vdesp_adu:
          type: float
          example: 0
          description: null
        peso_total:
          type: float
          example: 0
          description: Total weight
        info_adicao:
          type: null
          $ref: '#/components/schemas/InfoAdicao'
    ImportAdditions:
      type: array
      items:
        $ref: '#/components/schemas/ImportAddition'
    ImportFee:
      type: object
      properties:
        id:
          type: integer
          description: Import fee ID
        import_id:
          type: integer
          description: Import fee ID
        id_despesa:
          type: integer
          description: Company ID
        nome:
          type: string
          description: Name
        moeda:
          type: string
          description: Currency
        vmoeda:
          type: float
          example: 0
          description: Currency value
        valor:
          type: float
          example: 0
          description: Value
    ImportFees:
      type: array
      items:
        $ref: '#/components/schemas/ImportFee'
    ImpCambio:
      type: object
      properties:
        moeda:
          type: string
          description: Currency
        nome_moeda:
          type: string
          description: Currency name
        taxa:
          type: float
          example: 0
          description: Fee
        data_taxa:
          type: string
          description: Fee date
    ImpOutrasInfo:
      type: object
      properties:
        aliq_pis:
          type: float
          example: 0
          description: null
        aliq_cofins:
          type: float
          example: 0
          description: null
        observacoes:
          type: string
          description: Observation
        volumes:
          type: float
          example: 0
          description: Volumes
        peso_bruto:
          'type:type': float
          example: 0
          description: Gross weight
    ConsPedidoEnder:
      type: object
      properties:
        logradouro:
          type: string
          description: Address
        numero:
          type: integer
          description: Address number
        complemento:
          type: string
          description: Address complement
        bairro:
          type: string
          description: Neighborhood
        cep_fk:
          type: string
          description: Postal code
        id_municipio:
          type: integer
          description: City ID
        nome_municipio:
          type: string
          description: City name
        uf_sigla_fk:
          type: string
          description: State abbreviation
    ConsPedidoPessoa:
      type: object
      properties:
        cnpj:
          type: string
          description: Company ID on Internal Revenue Service (in Brazil is SEFAZ)
        cpf:
          type: string
          description: Brazil's version of a Social Security Number
        nome_razao:
          type: string
          description: Person name or company name
        nome_fantasia:
          type: string
          description: Trading name
        iestadual:
          type: string
          description: State ID
        telefone_fixo:
          type: string
          description: Phone
        single_email:
          type: string
          description: Email
        telefone:
          type: string
          description: Phone
        email:
          type: string
          description: Email
        danfe:
          type: string
          description: null
        ind_iedest:
          type: integer
          description: null
        cnae:
          type: integer
          description: null
        ender_sede:
          type: string
          description: Headquarters address
        endereco:
          type: object
          $ref: '#/components/schemas/ConsPedidoEnder'
        pjuridica:
          type: bool
          example: true
          description: If true this 'person' is a company
    Import:
      type: object
      properties:
        id:
          type: integer
          description: Import ID
        id_empresa:
          type: integer
          description: Company ID
        pemit:
          type: integer
          description: null
        data_desemb:
          type: string
          description: null
        cmun:
          type: integer
          description: Citie code
        numero_pedido:
          type: integer
          description: Order number
        pdest:
          type: integer
          description: null
        id_pessoa:
          type: integer
          description: Person ID
        cexportador:
          type: string
          description: null
        num_documento:
          type: string
          description: Document number
        data_documento:
          type: string
          description: Document date
        outras_info:
          type: object
          $ref: '#/components/schemas/ImpOutrasInfo'
        via_transp:
          type: integer
          description: null
        tp_inter:
          type: integer
          description: null
        emit:
          type: object
          $ref: '#/components/schemas/ConsPedidoPessoa'
        dest:
          type: object
          $ref: '#/components/schemas/ConsPedidoPessoa'
        taxa_cambio:
          type: array
          items:
            $ref: '#/components/schemas/ImpCambio'
        vtotal:
          type: float
          example: 0
          description: Total value
        num_nf:
          type: integer
          description: Invoice number
        valor_nf:
          type: float
          example: 0
          description: Invoice value
    Imports:
      type: array
      items:
        $ref: '#/components/schemas/Import'
    SkuStockSummarie:
      type: object
      properties:
        id:
          type: integer
          description: Sku stock summarie ID
        desc_predio:
          type: string
          description: Building description
        cod_sku:
          type: integer
          description: Stock Keeping Unit code
        quant_predio:
          type: float
          description: Building quantity
        quant_reserva:
          type: float
          description: Hoard quantity
        cmm_predio:
          type: float
          description: null
        efet_temp:
          type: float
          description: null
    SkuStockSummaries:
      type: array
      items:
        $ref: '#/components/schemas/SkuStockSummarie'
    Calendario:
      type: object
      properties:
        dia:
          type: string
          description: Day
    ScmConfig:
      type: object
      properties:
        id:
          type: integer
          description: SCM Config
        nome_reduzido:
          type: string
          description: Shirinked name
        proj:
          type: bool
          description: null
        loja:
          type: bool
          description: Shop
        suprim:
          type: bool
          description: Supply
        calendario:
          type: array
          items:
            $ref: '#/components/schemas/Calendario'
    ScmConfigs:
      type: array
      items:
        $ref: '#/components/schemas/ScmConfig'
    CashBalance:
      type: object
      properties:
        id:
          type: string
          description: Cash balance ID
        data_abertura:
          type: string
          description: Opening date
        id_empresa:
          type: integer
          description: Company ID
        nome_reduzido:
          type: string
          description: Shirinked date
        pdv:
          type: integer
          description: POS (Point Of Sale)
        operador:
          type: string
          description: Operator
        dinheiro:
          type: float
          example: 0
          description: Money
        fechada:
          type: bool
          example: true
          description: If true this cash balance is closed
        conferida:
          type: bool
          example: true
          description: If true this cash balance is checked
        inicial:
          type: integer
          description: Initial
        final:
          type: integer
          description: Final
        completa:
          type: bool
          example: true
          description: If true this cash balance is completed
        situacao:
          type: string
          description: Situation
        sigla_status:
          type: string
          description: Status abbreviation
    CashBalances:
      type: array
      items:
        $ref: '#/components/schemas/CashBalance'
    ConfigQuadro:
      type: object
      properties:
        amarelo:
          type: string
          description: Yellow
        vermelho:
          type: string
          description: Red
    Dashboard:
      type: object
      properties:
        id:
          type: integer
          description: Dashboard ID
        ordem:
          type: integer
          description: Order
        metric_id:
          type: integer
          description: Metrics ID
        tipo:
          type: string
          description: Type
        nome:
          type: string
          description: Name
        rotulo:
          type: string
          description: Label
        grupos:
          type: array
          items:
            $ref: '#/components/schemas/GrupoAcesso'
        graficos:
          type: integer
          description: Graphics
        ocultar_abaixo:
          type: float
          description: Hide below
        ocultar_acima:
          type: float
          description: Hide above
        amarelo_abaixo:
          type: float
          description: Yellow below
        amarelo_acima:
          type: float
          description: Yellow above
        vermelho_abaixo:
          type: float
          description: Red below
        vermelho_acima:
          type: float
          description: Red above
        config_quadro:
          type: object
          $ref: '#/components/schemas/ConfigQuadro'
        ativo:
          type: bool
          example: true
          description: If true this dashboard is enable on the system
    Dashboards:
      type: array
      items:
        $ref: '#/components/schemas/Dashboard'
    UserEmail:
      type: object
      properties:
        id:
          type: string
          description: User email ID
        auth_server:
          type: string
          description: authentication server
        user_id:
          type: integer
          description: User ID
        nome_usuario:
          type: string
          description: User name
        nome_completo:
          type: string
          description: Full name
        url_foto:
          type: string
          description: Picture URL
        verificado:
          type: bool
          example: true
          description: If true this user email was checked
        visivel:
          type: bool
          example: true
          description: If true this user email is visible
    UserEmails:
      type: array
      items:
        $ref: '#/components/schemas/UserEmail'
    GrupoAcesso:
      type: object
      properties:
        id:
          type: integer
          description: null
        nome:
          type: string
          description: Name
    UserAuth:
      type: object
      properties:
        user_id:
          type: integer
          description: User ID
        id:
          type: integer
          description: null
        nome_reduzido:
          type: string
          description: Shirinked name
        grupos:
          type: array
          items:
            $ref: '#/components/schemas/GrupoAcesso'
    UserAuths:
      type: array
      items:
        $ref: '#/components/schemas/UserAuth'
    Relacionamento:
      type: object
      properties:
        autorizado:
          type: bool
          example: true
          description: Authorized
        validade:
          type: string
          description: Lifetime
        senha_md5:
          type: string
          description: Password MD5 digest
        limite:
          type: integer
          description: Limit
    Telefone:
      type: object
      properties:
        tipo:
          type: string
          description: Phone type
        numero:
          type: string
          description: Phone number
    CustomerContact:
      type: object
      properties:
        id:
          type: integer
          description: Customer contact ID
        id_pessoa:
          type: integer
          description: Person ID
        idpes_contato:
          type: integer
          description: Contact person ID
        tipo:
          type: integer
          description: Type
        desc_tipo:
          type: string
          description: Type description
        nome_contato:
          type: string
          description: Contact name
        ativo:
          type: bool
          example: true
          description: If true this customer contact is enable on the system
        observacoes:
          type: string
          description: Observations
        relacionamento:
          type: object
          $ref: '#/components/schemas/Relacionamento'
        telefones:
          type: array
          items:
            $ref: '#/components/schemas/Telefone'
        email:
          type: string
          description: E-mail
        cpf_cnpj:
          type: integer
          description: Brazil's version of a Social Security Number or company ID on Internal Revenue Service (in Brazil is SEFAZ)
    CustomerContacts:
      type: array
      items:
        $ref: '#/components/schemas/CustomerContact'
    BankAccount:
      type: object
      properties:
        id:
          type: integer
          description: Bank account ID
        id_pessoa:
          type: integer
          description: Person ID
        cpf_cnpj:
          type: integer
          description: Brazil's version of a Social Security Number or company ID on Internal Revenue Service (in Brazil is SEFAZ)
        ccomp:
          type: integer
          description: null
        nome_banco:
          type: string
          description: Bank name
        num_agencia:
          type: integer
          description: Bank branch
        numero_conta:
          type: string
          description: Account number
        dvc:
          type: string
          description: Account check digit
        conta_desde:
          type: string
          description: Date of account was created
    BankAccounts:
      type: array
      items:
        $ref: '#/components/schemas/BankAccount'
    HelpPage:
      type: object
      properties:
        id:
          type: integer
          description: Help page ID
        nome_usuario:
          type: string
          description: User name
        app_id:
          type: string
          description: Application ID
        url_tela:
          type: string
          description: Screen URL
        url_ajuda:
          type: string
          description: Help URL
        texto_ajuda:
          type: string
          description: null
        config_ajuda:
          type: string
          description: null
        data_hora:
          type: string
          description: null
    HelpPages:
      type: array
      items:
        $ref: '#/components/schemas/HelpPage'
    Log:
      type: object
      properties:
        id:
          type: integer
          description: API log ID
        data_chamada:
          type: string
          description: Call date
        user_id:
          type: integer
          description: User ID
        nome_usuario:
          type: string
          description: User name
        end_ip:
          type: string
          description: IP address
        metodo:
          type: string
          description: Method
        url_chamada:
          type: string
          description: Called URL
        request_body:
          type: string
          description: Request body
        status:
          type: integer
          description: Status
        resp:
          type: string
          description: Response
        data_hora:
          type: string
          description: Date and time
        duracao:
          type: integer
          description: Timespan
    Logs:
      type: array
      items:
        $ref: '#/components/schemas/Log'
    PaymentPlanMethod:
      type: object
      properties:
        id:
          type: integer
          description: Payment plan method ID
        id_plano:
          type: integer
          description: Internal ID
        ordf:
          type: integer
          description: Order
        tpag:
          type: integer
          description: Payment type
        desc_forma:
          type: string
          description: Description
        min_parcelas:
          type: integer
          description: Minimal installment
        max_parcelas:
          type: integer
          description: Maximum installment
        parcela_min:
          type: float
          example: 0
          description: Minimal installment value
    PaymentPlanMethods:
      type: array
      items:
        $ref: '#/components/schemas/PaymentPlanMethod'
    InstallmentPlan:
      type: object
      properties:
        id:
          type: integer
          description: Installment plan ID
        ordp:
          type: integer
          description: null
        id_plu:
          type: integer
          description: null
        nome_plano:
          type: string
          description: Plan name
        vigencia_inicial:
          type: string
          description: Initial validity
        vigencia_final:
          type: string
          description: Final validity
        vigente:
          type: bool
          example: true
          description: If true this installment plan is valid on the system
    InstallmentPlans:
      type: array
      items:
        $ref: '#/components/schemas/InstallmentPlan'
    Issuer:
      type: object
      properties:
        id:
          type: integer
          description: Issuer ID
        cnpj_emit:
          type: integer
          description: Issuer company ID on Internal Revenue Service (in Brazil is SEFAZ)
        nome_reduzido:
          type: string
          description: Shirink name
        serie:
          type: integer
          description: Serial
        tpamb:
          type: integer
          description: Enviroment type
        versao_nfe:
          type: float
          example: 0
          description: Eletronic invoice version
        crt:
          type: integer
          description: null
        nome_regime:
          type: string
          description: Regime name
        serie_ajuste:
          type: integer
          description: Serial adjust
    Issuers:
      type: array
      items:
        $ref: '#/components/schemas/Issuer'
    Barcode:
      type: object
      properties:
        id:
          type: integer
          description: Barcode ID
        cod_produto:
          type: integer
          description: Product code
        ucom:
          type: string
          description: Trade unit
        prod_xprod:
          type: string
          description: Product description
        cod_sku:
          type: integer
          description: Sku (Stock Keeping Unit) code
    Barcodes:
      type: array
      items:
        $ref: '#/components/schemas/Barcode'
    Parameter:
      type: object
      properties:
        id:
          type: string
          description: Parameter ID
        escopo:
          type: string
          description: Scope
        desc_escopo:
          type: string
          description: Scope description
        id_empresa:
          type: integer
          description: Company ID
        nome_reduzido:
          type: string
          description: Shirink name
        tipo_config:
          type: string
          description: Config type
        nome_param:
          type: string
          description: Parameter name
        descricao:
          type: string
          description: Description
        valor:
          type: string
          description: Value
    Parameters:
      type: array
      items:
        $ref: '#/components/schemas/Parameter'
    Reason:
      type: object
      properties:
        id:
          type: integer
          description: Reason ID
        tipo:
          type: integer
          description: Reason type
        desc_tipo:
          type: string
          description: Type description
        codigo:
          type: integer
          description: Code
        descr_motivo:
          type: string
          description: Reason description
        ativo:
          type: bool
          example: true
          description: If true this reason is enable on the system
        ordem_tela:
          type: integer
          description: Position on screen
    Reasons:
      type: array
      items:
        $ref: '#/components/schemas/Reason'
    Auditoria:
      type: object
      properties:
        resp:
          type: string
          description: null
        falta_xml:
          type: array
          items:
            type: integer
        falta_proc:
          type: array
          items:
            type: integer
    IncompleteOpening:
      type: object
      properties:
        id:
          type: string
          description: Incomplete opening ID
        cnpj_emit:
          type: integer
          description: Issuer company ID on Internal Revenue Service (in Brazil is SEFAZ)
        data_abertura:
          type: string
          description: Opening date
        num_pdv:
          type: integer
          description: POS number
        nome_reduzido:
          type: string
          description: Shirink name
        nome_usuario:
          type: string
          description: User name
        cupom_inicial:
          type: integer
          description: Initial slip
        cupom_final:
          type: integer
          description: Final slip
        auditoria:
          type: object
          $ref: '#/components/schemas/Auditoria'
    IncompleteOpenings:
      type: array
      items:
        $ref: '#/components/schemas/IncompleteOpening'
    SkuCmm:
      type: object
      properties:
        id:
          type: integer
          description: Sku cmm ID
        sigla_loja:
          type: string
          description: Shop abbreviation
        dias_estoq:
          type: integer
          description: Stock days
        quant_mes:
          type: float
          example: 0
          description: Month quantity
        ticket_mes:
          type: float
          example: 0
          description: Mean price per month
        valor_mes:
          type: float
          example: 0
          description: Month value
        qtd_natural:
          type: float
          example: 0
          description: Natural quantity
        sazo_efet:
          type: float
          example: 0
          description: Seasonal efect
    SkuCmms:
      type: array
      items:
        $ref: '#/components/schemas/SkuCmm'
    SkuCurve:
      type: object
      properties:
        id:
          type: integer
          description: Sku curve ID
        nome_reduzido:
          type: string
          description: Shirink name
        curva_natural:
          type: integer
          description: Natural curve
    SkuCurves:
      type: array
      items:
        $ref: '#/components/schemas/SkuCurve'
    SkuTrend:
      type: object
      properties:
        '1':
          type: string
          description: January
        '2':
          type: string
          description: Febreary
        '3':
          type: string
          description: March
        '4':
          type: string
          description: April
        '5':
          type: string
          description: May
        '6':
          type: string
          description: June
        '7':
          type: string
          description: July
        '8':
          type: string
          description: August
        '9':
          type: string
          description: Setember
        '10':
          type: string
          description: October
        '11':
          type: string
          description: November
        '12':
          type: string
          description: December
        id:
          type: integer
          description: Sku trends ID
        sigla:
          type: string
          description: abbreviation
    SkusTrends:
      type: array
      items:
        $ref: '#/components/schemas/SkuTrend'
    SkuStock:
      type: object
      properties:
        id:
          type: integer
          description: Sku stock ID
        cod_sku:
          type: integer
          description: Sku code
        id_predio:
          type: integer
          description: Building ID
        desc_predio:
          type: string
          description: Building description
        letras:
          type: string
          description: Letters
        quantidade:
          type: float
          example: 0
          description: Quantity
        capacidade:
          type: integer
          description: Capacity
    SkuStocks:
      type: array
      items:
        $ref: '#/components/schemas/SkuStock'
    SkuArticleBarcode:
      type: object
      properties:
        gtin:
          type: integer
          description: null
    SkuArticle:
      type: object
      properties:
        id:
          type: integer
          description: Sku article ID
        data_cadastro:
          type: string
          description: Register date
        ucom:
          type: string
          description: Trade unit
        prod_xprod:
          type: string
          description: Product description
        mult_sku:
          type: float
          example: 0
          description: SKU multiplier
        sku_id:
          type: integer
          description: Sku ID
        preco_venda:
          type: float
          example: 0
          description: Sale price
        barcodes:
          type: array
          items:
            $ref: '#/components/schemas/SkuArticleBarcode'
        ativo:
          type: bool
          example: true
          description: If true this sku article is enable on the system
        url_foto:
          type: string
          description: Photo URL
    SkuArticles:
      type: array
      items:
        $ref: '#/components/schemas/SkuArticle'
    Sku:
      type: object
      properties:
        id:
          type: integer
          description: SKU ID
        ucom:
          type: string
          description: Trade unit
        prod_xprod:
          type: string
          description: Product description
        variacao:
          type: string
          description: null
        referencia:
          type: string
          description: null
        marca:
          type: string
          description: Brand
        id_grade:
          type: integer
          description: null
        id_categ:
          type: integer
          description: Category ID
        caminho:
          type: string
          description: null
        ativo:
          type: bool
          example: true
          description: If true this sku is enable on the system
        data_cadastro:
          type: string
          description: Register date
    Skus:
      type: array
      items:
        $ref: '#/components/schemas/Sku'
    Task:
      type: object
      properties:
        id:
          type: integer
          description: Task ID (this field is mandatory for React Admin)
        task_id:
          type: integer
          description: Task ID
        titulo_tarefa:
          type: string
          description: Task title
        tipo:
          type: string
          description: Task type
        conferida:
          type: bool
          description: If true this task was checked
        id_empresa:
          type: integer
          description: Company ID
        numero_pedido:
          type: integer
          description: Order number
        status:
          type: integer
          description: Status code
        num_nf:
          type: integer
          description: Invoice number
        previsto_para:
          type: string
          description: Scheduled to ...
        user_id:
          type: integer
          description: User ID
        nome_usuario:
          type: string
          description: User name
        progresso:
          type: integer
          description: Progress percentage
        coluna:
          type: integer
          description: Column
        url:
          type: string
          description: URL
    Tasks:
      type: array
      items:
        $ref: '#/components/schemas/Task'
    Supplier:
      type: object
      properties:
        id:
          type: integer
          description: Supplier ID
        nome_fornec:
          type: string
          description: Supplier name
        id_pessoa:
          type: integer
          description: Person ID
        nome_razao:
          type: string
          description: Person name or company name
        ativo:
          type: bool
          example: true
          description: If true this supplier is enable on the system
    Suppliers:
      type: array
      items:
        $ref: '#/components/schemas/Supplier'
    PaymentTypeOptions:
      type: object
      properties:
        parcelavel:
          type: bool
          example: true
          description: If true will be generated installments
        requer_liberacao:
          type: bool
          example: true
          description: If true is required authorization
    PaymentType:
      type: object
      properties:
        id:
          type: integer
          description: Payment Type ID
        sigla_forma:
          type: string
          description: Payment type abbreviation
        desc_forma:
          type: string
          description: Payment type description
        ativa:
          type: bool
          example: true
          description: If true this payment type is enable on the system
        auto_quitacao:
          type: bool
          example: true
          description: If true this will be payed automatically
        outras_opcoes:
          type: object
          $ref: '#/components/schemas/PaymentTypeOptions'
    PaymentTypes:
      type: array
      items:
        $ref: '#/components/schemas/PaymentType'
    Contract:
      type: object
      properties:
        id:
          type: integer
          description: Contract ID
        id_pessoa:
          type: integer
          description: Person ID
        nome_razao:
          type: string
          description: Person name or company name
        data_inicio:
          type: string
          description: Initial date
        numero_pedido:
          type: integer
          description: Order number
        numero_cartao:
          type: string
          description: Card number
        ativo:
          type: bool
          example: true
          description: If true this caontrac is enable on the system
        plan_id:
          type: integer
          description: Plan ID
        cod_produto:
          type: integer
          description: Product code
        prod_xprod:
          type: string
          description: Product description
    Contracts:
      type: array
      items:
        $ref: '#/components/schemas/Contract'
    PostCategoryLink:
      type: object
      properties:
        id:
          type: integer
          description: Link ID
        vinculos:
          description: Links
          type: array
          items:
            type: integer
        chips:
          type: object
          $ref: '#/components/schemas/Link'
    Link:
      type: object
      properties:
        link_id:
          type: integer
          description: Link ID
        catalog_id:
          type: integer
          description: Catalog ID
        desc_categ:
          type: string
          description: Category description
        catalogo:
          type: string
          description: Catalog name
    CatalogLink:
      type: object
      properties:
        category_id:
          type: integer
          description: Category ID on the system
        id:
          type: integer
          description: Category ID by tenant
        catalog_id:
          type: integer
          description: Catalog ID
        nome_catalogo:
          type: string
          description: Catalog name
        breadcrumb:
          type: string
          description: Breadcrumb
        chips:
          type: object
          $ref: '#/components/schemas/Link'
    CatalogLinks:
      type: array
      items:
        $ref: '#/components/schemas/CatalogLink'
    Categories:
      type: array
      items:
        $ref: '#/components/schemas/CatalogCategory'
    CatalogCategory:
      type: object
      properties:
        id:
          type: integer
          description: Catalog category ID
        nivel_categ:
          type: integer
          description: Category level
        breadcrumb:
          type: string
          description: Breadcrumb
        desc_categoria:
          type: string
          description: Category description
        parent_id:
          type: integer
          description: Parent catalog category ID
        ativa:
          type: bool
          example: true
          description: If true this catalog category is enable on the system
    CatalogCategories:
      type: array
      items:
        $ref: '#/components/schemas/CatalogCategory'
    Catalog:
      type: object
      properties:
        id:
          type: integer
          description: Catalog ID
        nome_catalogo:
          type: string
          description: Catalog's name
        padrao:
          type: bool
          example: true
          description: If true this is the standard catalog
        eh_taxonomia:
          type: bool
          example: true
          description: If true this is a class of catalog
        ativo:
          type: bool
          example: true
          description: If true this catalog is enable on the system
    Catalogs:
      type: array
      items:
        $ref: '#/components/schemas/Catalog'
    PostEmailTemplate:
      type: object
      properties:
        id:
          type: integer
          description: Template ID
        template:
          type: string
          example: danfe
          description: Template's type
        id_empresa:
          type: integer
          description: Company ID
        corpo:
          type: string
          description: HTML e-mail's body
        config_template:
          type: object
          $ref: '#/components/schemas/ConfigTemplate'
    ConfigTemplate:
      type: object
      properties:
        sufixo_assunto:
          type: string
          description: Subject sufix
        emails_adicionais:
          type: array
          items:
            type: string
          description: Aditional e-mails
    EmailTemplate:
      type: object
      properties:
        id:
          type: integer
          description: Email template ID
        descricao_template:
          type: string
          description: Template description
        rnx_compid_fk:
          type: integer
          description: Company ID
        nome_reduzido:
          type: string
          description: Short company name
        sigla_loja:
          type: string
          description: Shop abbreviation
        config_template:
          type: object
          $ref: '#/components/schemas/ConfigTemplate'
    EmailTemplates:
      type: array
      items:
        $ref: '#/components/schemas/EmailTemplate'
    GeraEvento:
      type: object
      properties:
        chnfe:
          type: string
          description: Eletronic invoice's access key
        tp_evento:
          type: integer
          description: Event type
        xjust:
          type: string
          description: Justification
        nseq:
          type: integer
          description: Sequence number
        num_inicial:
          type: integer
          description: Initial number
        num_final:
          type: integer
          description: Final number
        protocolo:
          type: integer
          description: Protocol
        id_autoriz:
          type: integer
          description: Authorization ID
        valor_inut:
          type: integer
          description: Disable value
    ExtraOrder:
      type: object
      properties:
        numero:
          type: integer
          description: order number
    Invoices:
      type: object
      properties:
        pedidos:
          type: array
          items:
            $ref: '#/components/schemas/ExtraOrder'
    CarrierCompany:
      type: object
      properties:
        id_empresa:
          type: integer
          description: Company ID
        sigla:
          type: string
          description: Company abbreviation
    Carrier:
      type: object
      properties:
        id:
          type: integer
          description: Carrier ID
        nome_entregador:
          type: string
          description: Carrier name
        id_pessoa:
          type: integer
          description: Person ID
        cpf_cnpj:
          type: integer
          description: Brazil's version of a Social Security Number or company ID on Internal Revenue Service (in Brazil is SEFAZ)
        nome_razao:
          type: string
          description: Person name or company name
        ativo:
          type: bool
          example: true
          description: If true this carrier is active on the system
        empresas:
          type: array
          items:
            $ref: '#/components/schemas/CarrierCompany'
    Carriers:
      type: array
      items:
        $ref: '#/components/schemas/Carrier'
    Desdobramento:
      type: object
      properties:
        seq:
          type: integer
          description: Sequence
        qtd:
          type: float
          example: 0
          description: Quantity
        cod_produto:
          type: integer
          description: Product code
    PurchaseItem:
      type: object
      properties:
        id:
          type: integer
          description: Purchase item ID
        seq_item:
          type: integer
          description: Sequence
        cprod:
          type: string
          description: Product code on eletronic invoice (NF-e)
        ucom:
          type: string
          description: Trade unit on eletronic invoice (NF-e)
        xprod:
          type: string
          description: Product description on eletronic invoice (NF-e)
        qcom:
          type: float
          example: 0
          description: Trade quantity on eletronic invoice (NF-e)
        vuncom:
          type: float
          example: 0
          description: Trade unit value on eletronic invoice (NF-e)
        codigo_sku:
          type: integer
          description: Stock Keeping Unit code
        cod_produto:
          type: integer
          description: Product code on the system
        prod_xprod:
          type: string
          description: Product description on eletronic invoice (NF-e)
        quant_sku:
          type: float
          example: 0
          description: Stock Keeping Unit quantity
        vunit_sku:
          type: float
          example: 0
          description: Stock Keeping Unit value
        limpar:
          type: bool
          example: false
          description: If true this purchase item will lost relationship in the system (only in PUT)
        quant:
          type: integer
          description: Quantity
        desdobramento:
          type: array
          $ref: '#/components/schemas/Desdobramento'
    PurchaseItems:
      type: array
      items:
        $ref: '#/components/schemas/PurchaseItem'
    PhoneType:
      type: object
      properties:
        id:
          type: string
          description: Phone's type
        legado:
          type: bool
          example: true
          description: If true this type is from previous system version
    PhoneTypes:
      type: array
      items:
        $ref: '#/components/schemas/PhoneType'
    AddressType:
      type: object
      properties:
        id:
          type: integer
          description: Address type ID
        desc_tipo:
          type: string
          description: Type description
        tipo_sede:
          type: bool
          example: true
          description: If true this address type is the Headquarters
    AddressTypes:
      type: array
      items:
        $ref: '#/components/schemas/AddressType'
    AddExtraInfo:
      type: object
      properties:
        tipo_legado:
          type: string
          description: Legacy type in the previous version of the system
        tipo:
          type: string
          description: Type
        referencia:
          type: string
          description: Reference
        contato:
          type: string
          description: Contact
        numero_documento:
          type: string
          description: Document number
    Address:
      type: object
      properties:
        id:
          type: integer
          description: Address ID
        id_pessoa:
          type: integer
          description: Person ID
        address_id:
          type: integer
          description: Address ID
        id_endereco:
          type: integer
          description: Address code
        id_tipo:
          type: integer
          description: Address type
        desc_tipo:
          type: string
          description: Type description
        logradouro:
          type: string
          description: Address
        numero:
          type: integer
          description: Address number
        complemento:
          type: string
          description: Address complement
        bairro:
          type: string
          description: Neighbourhood
        cidade:
          type: string
          description: City
        uf:
          type: string
          description: State abbreviation
        cep:
          type: string
          description: Postal code
        cmun:
          type: integer
          description: city code
        sede:
          type: bool
          example: true
          description: If true this is the main address
        ativo:
          type: bool
          example: true
          description: If true this address is active in the system
        excluir:
          type: bool
          example: false
          description: If true this address will be deleted from the system
        codigo_pais:
          type: integer
          description: Country code
        nome_pais:
          type: string
          description: Country
        info_extra:
          type: object
          description: Aditional information
          $ref: '#/components/schemas/AddExtraInfo'
    Addresses:
      type: array
      items:
        $ref: '#/components/schemas/Address'
    CustomerEmail:
      type: object
      properties:
        id_pessoa:
          type: integer
          description: Person ID
        email:
          type: string
          description: Customer e-mail
        pessoal:
          type: bool
          example: true
          description: If true this e-mail is personal
        danfe:
          type: bool
          example: true
          description: If true this is the e-mail for receive danfe (eletronic invoice auxiliary document)
        favorito:
          type: bool
          example: false
          description: If true this e-mail is favorite
        excluir:
          type: bool
          example: false
          description: If true this e-mail will be deleted (only in PUT)
    CustomerEmails:
      type: array
      items:
        $ref: '#/components/schemas/CustomerEmail'
    CustomerPhone:
      type: object
      properties:
        id:
          type: integer
          description: Customer phone ID
        id_pessoa:
          type: integer
          description: Person ID
        phone_id:
          type: integer
          description: Phone ID
        tipo:
          type: string
          description: Phone type
        numero:
          type: string
          description: Phone number
        observacoes:
          type: string
          description: Observations
        eh_principal:
          type: bool
          example: true
          description: If true this is the main phone number
        excluir:
          type: bool
          example: false
          description: If true this phone number will be removed
    CustomerPhones:
      type: array
      items:
        $ref: '#/components/schemas/CustomerPhone'
    CustomerTransaction:
      type: object
      properties:
        id:
          type: integer
          description: Customer transaction ID
        numero_pedido:
          type: integer
          description: Order number
        tipo_oper:
          type: string
          description: Operation type
        tp:
          type: string
          description: Document type
        total_vnf:
          type: float
          example: 0
          description: Invoice's total value
        numero:
          type: integer
          description: Invoice's number
        serie:
          type: integer
          description: Invoice's serial
        lista_cfop:
          type: array
          items:
            type: integer
          description: List of brazilian operation Internal Revenue Service code
    CustomerTransactions:
      type: array
      items:
        $ref: '#/components/schemas/CustomerTransaction'
    CustomerImport:
      type: object
      properties:
        cpf_cnpj:
          type: string
          description: Brazil's version of a Social Security Number or company ID on Internal Revenue Service (in Brazil is SEFAZ)
        nome_razao:
          type: string
          description: Person name or company name
        nome_fantasia:
          type: string
          description: Trading name
        cnae_codigo:
          type: string
          description: Economic activity national classification
        telefone:
          type: string
          description: Phone number
        tipo_endereco:
          type: string
          description: Address type
        prefixo_endereco:
          type: string
          description: Address prefix
        logradouro:
          type: string
          description: Address
        numero:
          type: integer
          description: Number
        complemento:
          type: string
          description: Number complement
        bairro:
          type: string
          description: Neighborhood
        cep:
          type: string
          description: Postal code
        municipio:
          type: string
          description: City
        uf:
          type: string
          description: State abbreviation
        latitude:
          type: string
          description: Latitude
        longitude:
          type: string
          description: Longitude
    CustomersImport:
      type: array
      items:
        $ref: '#/components/schemas/CustomerImport'
    Customer:
      type: object
      properties:
        id:
          type: integer
          description: Customer ID
        id_legado:
          type: integer
          description: Customer ID on a previous system version
        cpf_cnpj:
          type: integer
          description: Brazil's version of a Social Security Number or company ID on Internal Revenue Service (in Brazil is SEFAZ)
        nome_razao:
          type: string
          description: Person name or company name
        cnpj:
          type: string
          description: Company ID on Internal Revenue Service (in Brazil is SEFAZ)
        cpf:
          type: string
          description: Brazil's version of a Social Security Number
        nome_fantasia:
          type: string
          description: Trading name
        iestadual:
          type: string
          description: Company state ID
        telefone:
          type: string
          description: Customer phone
        email:
          type: string
          description: Customer e-mail
        danfe:
          type: string
          description: Eletronic invoice auxiliary document
        ind_iedest:
          type: integer
          description: Tax code
        cnae:
          type: integer
          description: Economic activity national classification
        ender_sede:
          type: string
          description: Headquarters address
        pjuridica:
          type: string
          description: If true this customers is a company
        canal:
          type: string
          description: Sales channel
        id_canal:
          type: integer
          description: Sales channel ID
        id_vendedor:
          type: integer
          description: Clerk ID
        id_indicacao:
          type: integer
          description: Indication ID
        ativo:
          type: bool
          example: true
          description: If true the customer is enable on the system
        verificar:
          type: bool
          example: true
          description: If true the system must check the customer
    Customers:
      type: array
      items:
        $ref: '#/components/schemas/Customer'
    Recharge:
      type: object
      properties:
        cnpj_emit_fk:
          type: integer
          description: Issuer company ID on Internal Revenue Service (in Brazil is SEFAZ)
        cupom_rnge3:
          type: integer
          description: Slip number on a previous system version
        pdv:
          type: integer
          description: POS (point of sale) number
        id_empresa:
          type: integer
          description: Company ID
        data_recarga:
          type: string
          description: Recharge date
        hora_recarga:
          type: string
          description: Recharge time
        numero_telefone:
          type: integer
          description: Phone number
        nome_operadora:
          type: string
          description: Operator name
        valor_recarga:
          type: float
          example: 0
          description: Recharge value
        nome_usuario:
          type: string
          description: User name
        id_recarga:
          type: integer
          description: Recharge ID
        id_abertura:
          type: string
          description: Opening ID
    Recharges:
      type: array
      items:
        $ref: '#/components/schemas/Recharge'
    Slip:
      type: object
      properties:
        id:
          type: integer
          example: 0
          description: Slip ID on the system
        cnpj_emit:
          type: integer
          example: 0
          description: Issuer company ID on Internal Revenue Service (in Brazil is SEFAZ)
        data_emissao:
          type: string
          example: '2020-01-11'
          description: Issue date
        data_hora:
          type: string
          example: '2020-01-11 12:01:10'
          description: Date and time
        tipo:
          type: string
          description: Slip type
        pdv:
          type: integer
          description: POS number
        numero:
          type: integer
          description: Slip's number
        id_pessoa:
          type: integer
          description: Person ID
        nome_razao:
          type: string
          description: Company or person name
        cpf_cnpj:
          type: integer
          description: Company ID on Internal Revenue Service (in Brazil is SEFAZ)
        total_Vnf:
          type: float
          example: 0
          description: Invoice's total value
        qr_code:
          type: string
          description: Quick Response code
        parcelar:
          type: bool
          example: true
          description: Inform if it has installments
        formas_pagto:
          type: string
          description: Payment types
        id_empresa:
          type: integer
          description: Company ID
        nome_reduzido:
          type: string
          description: Short company name
        nome_usuario:
          type: string
          description: User name
    Slips:
      type: array
      items:
        $ref: '#/components/schemas/Slip'
    Contacttype:
      type: object
      properties:
        id:
          type: integer
          example: 0
          description: Contact type ID on the system
        descricao_tipo:
          type: string
          example: test
          description: Contact type's description
    Contacttypes:
      type: array
      items:
        $ref: '#/components/schemas/Contacttype'
    Purchase:
      type: object
      properties:
        id:
          type: integer
          example: 0
          description: Purchase ID on the system
        id_pessoa:
          type: integer
          example: 1234
          description: Person ID
        serie:
          type: integer
          example: 567
          description: Serial's invoice
        numero:
          type: integer
          example: 898898
          description: Number's invoice
        status:
          type: integer
          example: 10
          description: Status's purchase
        data_emissao:
          type: string
          example: '2017-01-11'
          description: Issue date
        nome_emitente:
          type: string
          example: John Doe
          description: Issuer name
        dest:
          type: string
          example: BCD
          description: Destination shop abbreviation
        chnfe:
          type: string
          example: '43170102505657000136550010011145821111011012'
          description: Invoice's access key (in Brazil)
        total_vnf:
          type: float
          example: 2629.56
          description: Total value
        perc_map:
          type: float
          example: 29.56
          description: Maped percentage
        perc_pago:
          type: float
          example: 29.56
          description: Payed percentage
    Purchases:
      type: array
      items:
        $ref: '#/components/schemas/Purchase'
    Certificates:
      type: array
      items:
        $ref: '#/components/schemas/Certificate'
    Certificate:
      type: object
      properties:
        id:
          type: integer
          example: 0
          description: Company ID on the system
        raiz_cnpj:
          type: integer
          example: 47542680
          description: First eigth digits of company ID on Internal Revenue Service (in Brazil is SEFAZ)
        cnpj_emit:
          type: integer
          example: 43538198000174
          description: Issuer company ID on Internal Revenue Service (in Brazil is SEFAZ)
        serie_certificado:
          type: string
          example: 6FF3CDF6A7B528CB
          description: Certificate's serial
        token_csc:
          type: string
          example: 220bc17f-6801-433f-9da2-b712651ada62
          description: Certificate's token
        token_id:
          type: integer
          example: 2
          description: Token ID
        data_validade:
          type: string
          example: '2020-09-17'
          description: Expiration date
        nome_razao:
          type: string
          example: REDNAXEL INFORMATICA LTDA
          description: Company name
    Company:
      type: object
      properties:
        id:
          type: integer
          example: 0
          description: Company ID on the system
        id_empresa:
          type: integer
          example: 0
          description: Company ID on the tenant
        nome_reduzido:
          type: string
          example: REDNAXEL
          description: Short company name
        cnpj:
          type: integer
          example: 4754268000170
          description: Company ID on Internal Revenue Service (in Brazil is SEFAZ)
        sigla_loja:
          type: string
          example: RNX
          description: Shop abbreviation
        id_pessoa:
          type: integer
          example: 11355001
          description: Person ID
        nome_razao:
          type: string
          example: REDNAXEL INFORMATICA LTDA
          description: Company name
        nome_municipio:
          type: string
          example: Porto Alegre
          description: City name
        uf_sigla_fk:
          type: string
          example: RS
          description: State abbreviation
        url_fotos:
          type: string
          example: 'http://10.10.1.10/fotos/'
          description: Path to the copany pictures
        utiliza_pdv:
          type: bool
          example: true
          description: Informs whether the company uses POS (Point of Sale)
        cnpj_padrao:
          type: integer
          example: 0
          description: Default compay identification on Internal Revenue Service (in Brazil is SEFAZ)
    Companies:
      type: array
      items:
        $ref: '#/components/schemas/Company'
    CompanyInfo:
      type: object
      properties:
        id:
          type: integer
          example: 0
          description: Company ID on the system
        id_empresa:
          type: integer
          example: 176542
          description: Company ID on the tenant
        nome_reduzido:
          type: string
          example: REDNAXEL
          description: Short company name
        cnpj:
          type: integer
          example: 4754268000170
          description: Company ID on Internal Revenue Service (in Brazil is SEFAZ)
        sigla_loja:
          type: string
          example: RNX
          description: Shop abbreviation
        id_pessoa:
          type: integer
          example: 11355001
          description: Person ID
        nome_razao:
          type: string
          example: REDNAXEL INFORMATICA LTDA
          description: Company name
        nome_municipio:
          type: string
          example: Porto Alegre
          description: City name
        uf_sigla_fk:
          type: string
          example: RS
          description: State abbreviation
        url_fotos:
          type: string
          example: 'http://10.10.1.10/fotos/'
          description: Path to the copany pictures
        utiliza_pdv:
          type: bool
          example: true
          description: Informs if the company uses POS (Point of Sale)
        cnpj_padrao:
          type: integer
          example: 0
          description: Default compay identification on Internal Revenue Service (in Brazil is SEFAZ)
    BatchesPostResult:
      type: object
      properties:
        id:
          type: string
          example: '432767348948'
          description: Receipt number generated by Internal Revenue Service (in Brazil is SEFAZ)
    BatchePost:
      type: object
      properties:
        ids:
          description: 'List of order''s numbers separated by comma [ , ]'
          type: array
          maxItems: 20
          items:
            type: integer
            example: 12657
    JSONPedidoFlags:
      type: object
      properties:
        requer_separacao:
          type: bool
          example: false
          description: Inform if is need to spread out
        embalagem_presente:
          type: bool
          example: false
          description: Inform if the packaging is present
        doca_expedicao:
          type: bool
          example: false
        limite_volume:
          type: bool
          example: false
        data_emissao:
          type: string
          example: '2019-10-12'
        incide_ipi:
          type: bool
          example: true
        versao_calculo:
          type: integer
          example: 2
        cliente_retira:
          type: bool
          example: true
        cfop_manual:
          type: integer
          example: 5405
        especial:
          type: bool
          example: false
        status_financ:
          type: integer
          example: 3
        limpar_flags:
          type: string
    JSONWmsBarcodes:
      type: object
      xml:
        name: barcode
      properties:
        cod_barras:
          type: integer
          example: 12345678905
          description: Number coded in bar
        cod_produto:
          type: integer
          example: 174585
          description: Product's code
        codigo_sku:
          type: integer
          example: 3452876
          description: Stock keeping unit code
        multiplic_sku:
          type: float
          example: 2.23
          description: SKU multiplier
    JSONPedidoConfVolume:
      type: object
      xml:
        name: volume
      properties:
        vol:
          type: integer
          example: 2
          description: Volume
        qtd:
          type: integer
          example: 5
          description: Quantity
    JSONPedidoConfItem:
      type: object
      xml:
        name: abc
      properties:
        ordem:
          type: integer
          example: 1
          description: position number
        cod_produto:
          type: integer
          example: 17654
          description: Product code
        prod_ucom:
          type: string
          example: pct
          description: Trade unit
        prod_xprod:
          type: string
          example: packages
          description: Product description
        quant_pedido:
          type: integer
          example: 2
          description: Order's quantity
        quant_separada:
          type: integer
          example: 2
          description: Spread out quantity
        quant_conferida:
          type: integer
          example: 2
          description: Checked quantity
        peso_kg:
          type: integer
          example: 4
          description: Weight in kilograms
        volumes:
          type: array
          description: Volumes
          xml:
            name: volume
            wrapped: true
          items:
            $ref: '#/components/schemas/JSONPedidoConfVolume'
    JSONPedTribDetalhe:
      type: object
      xml:
        name: tax
      properties:
        trib:
          type: string
          example: ICMS
          description: Type of tax
        orig:
          type: string
          description: Origin of the tax
        CST:
          type: string
          example: 10
          description: Tax status code
        modBC:
          type: string
          example: 2
          description: Calc base modality
        pRedBC:
          type: string
          example: 5
          description: Calc Base reduction percentage
        vBC:
          type: string
          example: 7
          description: Calc Base value
        pICMS:
          type: string
          description: Tax aliquot
        vICMSOp:
          type: string
          description: Operation value of the tax
        pDif:
          type: string
          example: 30
          description: Percentage delay for the tax payment
        vICMSDif:
          type: string
          example: 50
          description: Value of the delayed tax
        vICMS:
          type: string
          description: Tax value
        vBCFCP:
          type: string
        pFCP:
          type: string
        vFCP:
          type: string
        modBCST:
          type: string
          example: 1
          description: Calc base modality tax substitution
        pMVAST:
          type: string
          example: 15
          description: Margin percentage value added to the tax
        pRedBCST:
          type: string
          example: 10
          description: Reduction percentage of calc base from tax
        vBCST:
          type: string
          description: Tax substitution calc base value
        pICMSST:
          type: string
          description: Tax substitution aliquot
        vICMSST:
          type: string
          description: Tax substitution value
        vBCFCPST:
          type: string
        pFCPST:
          type: string
        vFCPST:
          type: string
        vBCSTRet:
          type: string
          description: Calc base blocked
        pST:
          type: string
        vICMSSTRet:
          type: string
          description: Tax value blocked
        vBCFCPSTRet:
          type: string
        pFCPSTRet:
          type: string
        vFCPSTRet:
          type: string
        vICMSDeson:
          type: string
          description: Tax total value degraded
        motDesICMS:
          type: string
          description: Tax degrade reason
        pRedBCEfet:
          type: string
        vBCEfet:
          type: string
        pICMSEfet:
          type: string
        vICMSEfet:
          type: string
        CNPJProd:
          type: string
          description: Producer company code
        cSelo:
          type: string
          description: Control stamp code
        qSelo:
          type: string
          description: Control stamp amount
        cEnq:
          type: string
          description: Legal framing code
        qUnid:
          type: string
          description: Unit total amount
        vUnid:
          type: string
          description: unit value
        pIPI:
          type: string
          description: Manufactured product tax aliquot
        vIPI:
          type: string
          description: Manufactured product tax value
        pPIS:
          type: string
          description: Social integration program aliquot
        vPIS:
          type: string
          description: Social integration program value
        qBCProd:
          type: string
          description: Amount sold
        vAliqProd:
          type: string
          description: Social integration program aliquot in currency
        pCOFINS:
          type: string
          description: Social security afford contribution aliquot
        vCOFINS:
          type: string
          description: Social security afford contribution value
        vDespAdu:
          type: string
          description: Customs office expense value
        vII:
          type: string
          description: Import tax value
        vIOF:
          type: string
          description: Financial operation tax value
        vICMSSubstituto:
          type: string
        cBenef:
          type: string
          example: 43810001
          description: Fiscal benefit code
        calcular:
          type: bool
          example: true
          description: If 'true' all the above fields will be calculated by the system
    JSONInfoAdic:
      type: object
      properties:
        cfop_item:
          type: integer
          example: 1556
          description: Code that identify the type of product move
        cbenef:
          type: string
          example: 43820001
          description: Fiscal benefit code
    OrderStatusVerify:
      type: object
      properties:
        num_pedido:
          type: integer
          example: 179925
          description: Order number
        itens:
          type: array
          description: Itens
          xml:
            name: abc
            wrapped: true
          items:
            $ref: '#/components/schemas/JSONPedidoConfItem'
        barcodes:
          type: array
          description: Barcodes
          xml:
            name: barcodes
            wrapped: true
          items:
            $ref: '#/components/schemas/JSONWmsBarcodes'
        flags:
          description: Order's flags
          allOf:
            - $ref: '#/components/schemas/JSONPedidoFlags'
    OrderStatus:
      type: object
      properties:
        status:
          type: integer
          example: 720
          description: Order status code
        retroceder:
          type: bool
          example: true
          description: Moves back the order for a previous status
        limpar_zerados:
          type: bool
          example: true
          description: If 'true' cleans zeroed items in the order
    OrderStatusGet:
      type: object
      properties:
        rnx_order_id:
          type: integer
          example: 43567
          description: Order's identification
        status_destino:
          type: integer
          example: 730
          description: Next possible order's status
        sigla_status:
          type: string
          example: NF EXPEDIDA
          description: Status abbreviation
        desc_status:
          type: string
          example: Expedida (saiu para entrega)
          description: More information about status_destino meaning
    OrderItems:
      type: object
      properties:
        seq:
          type: integer
          example: 2
          description: Sequence number
        idprod:
          type: integer
          example: 10887
          description: The Product ID on the system
        qcom:
          type: integer
          example: 3
          description: Item amount
        vuncom:
          type: integer
          example: 10
          description: Item unitary value in the country currency
        vdesc:
          type: integer
          example: 2
          description: Item value of reduced price (discount) in the country currency
        vprod:
          type: integer
          example: 30
          description: Item total value in the country currency (vuncom * qcom)
        zerado:
          type: bool
          example: true
          description: null
        motivo:
          type: integer
          example: 2000
          description: Code to specify the reason for the discount
        plu:
          type: integer
          example: 2
          description: null
        info_adic:
          description: Additional information
          allOf:
            - $ref: '#/components/schemas/JSONInfoAdic'
        imposto:
          type: array
          description: Tax
          xml:
            name: tax
            wrapped: true
          items:
            $ref: '#/components/schemas/JSONPedTribDetalhe'
        zerar_desconto:
          type: bool
          example: true
          description: If 'true' the field 'vdesc' won't be applied
    CashierResp:
      type: object
      properties:
        id:
          type: integer
          example: 1554
          description: The POS ID on the system
        cnpj:
          type: integer
          example: 5563868000113
          description: Company ID used at Brazil. Could be not present
        pdv_id:
          type: integer
          example: 1554
          description: Same information as `id` field. Could be not present
        num_serie:
          type: integer
          example: 224
          description: POS serial number
        limpar_hash:
          type: bool
          example: false
          description: Inform whether hash will be cleaned or not
        producao:
          type: bool
          example: false
          description: Inform whether is production environment or not
        pinpad:
          type: bool
          example: false
          description: Inform whether POS has pinpad or not
        gaveta:
          type: bool
          example: false
          description: Inform whether POS has drawer or not
        contagem:
          type: bool
          example: false
          description: Inform whether POS's operator must execute bills count process
    CashierPost:
      type: object
      properties:
        cnpj:
          type: integer
          example: 5563868000113
          description: Company ID used at Brazil
        num_serie:
          type: integer
          example: 224
          description: POS serial number
        producao:
          type: bool
          example: false
          description: Is it production environment?
        pinpad:
          type: bool
          example: false
          description: Has any pinpad device?
        gaveta:
          type: bool
          example: false
          description: Has any drawer?
        limpar_has:
          type: bool
          example: false
          description: Should clean the hash?
        contagem:
          type: bool
          example: false
          description: Should perform bills count process?
    CashierPut:
      type: object
      properties:
        producao:
          type: bool
          example: true
          description: Is it production environment?
        pinpad:
          type: bool
          example: true
          description: Has any pinpad device?
        gaveta:
          type: bool
          example: true
          description: Has any drawer?
        limpar_has:
          type: bool
          example: true
          description: Should clean the hash?
        contagem:
          type: bool
          example: true
          description: Should perform bills count process?
    Images:
      type: object
      properties:
        url:
          type: string
          example: 'https://storage.googleapis.com/rednaxel-fotos/produto/cdp/web.10373.jpg'
          description: Complete path of image on the cloud
    ImagesPos:
      type: object
      properties:
        url:
          type: string
          example: 'https://storage.googleapis.com/rednaxel-fotos/produto/cdp/web.10373-1.jpg'
          description: Complete path of image on the cloud
    ImagesLogo:
      type: object
      properties:
        url:
          type: string
          example: 'https://storage.googleapis.com/rednaxel-fotos/logo/cdp/web.png'
          description: Complete path of image on the cloud
    ImagesDanfe:
      type: object
      properties:
        url:
          type: string
          example: 'https://storage.googleapis.com/rednaxel-fotos/logo/cdp/cdp.jpg'
          description: Complete path of image on the cloud
    ImagesDanfeCo:
      type: object
      properties:
        url:
          type: string
          example: 'https://storage.googleapis.com/rednaxel-fotos/logo/cdp/cdp-1596.jpg'
          description: Complete path of image on the cloud
    Login:
      type: object
      properties:
        user_id:
          type: integer
          example: 58232
          description: API's user ID
        token:
          type: string
          example: b56f8a50-9eb3-4d7b-ab1e-92ad37be816e
          description: 'Hash of username, account and password'
      description: ''
      title: ''
    Cashier:
      type: object
      properties:
        id:
          type: integer
          example: 1778
          description: POS ID
        cnpj_emit_fk:
          type: integer
          example: 5563868002400
          description: Emitter ID
        num_serie:
          type: integer
          example: 205
          description: POS serial number
        nome_usuario:
          type: string
          example: JULIO
          description: Username
        hash_pdv:
          type: string
          example: dad63f00-3ec7-4d35-b044-013816eee203
          description: Hash
        producao:
          type: bool
          example: true
          description: Is it production environment?
        pinpad:
          type: bool
          example: true
          description: Has it any pinpad?
        gaveta:
          type: bool
          example: true
          description: Has it any drawer?
        contagem:
          type: bool
          example: true
        ultimo_login:
          type: string
          format: date-time
          description: Last time of a user's login
        id_empresa:
          type: int
          example: 35
          description: Company ID
        nome_reduzido:
          type: string
          example: DR FLORES
          description: Short company name
    Cashiers:
      type: array
      items:
        $ref: '#/components/schemas/Cashier'
    NovaEmpresa:
      type: object
      properties:
        nome_reduzido:
          type: string
          example: DR FLORES
          description: Short company name
        sigla_loja:
          type: string
          example: DFL
          description: Shop abbreviation
        id_pessoa:
          type: integer
          description: Pesrson ID
        cnpj_padrao:
          type: integer
          description: Default compay identification on Internal Revenue Service (in Brazil is SEFAZ)
        utiliza_pdv:
          type: bool
          example: true
          description: Informs if the company uses POS (Point of Sale)
    Empresa:
      type: object
      properties:
        id:
          type: integer
          example: 176542
          description: Company ID
        nome_reduzido:
          type: string
          example: DR FLORES
          description: Short company name
        sigla_loja:
          type: string
          example: DFL
          description: Company initials
        id_pessoa:
          type: integer
          description: Pesrson ID
        cnpj_padrao:
          type: integer
          description: Default compay identification on Internal Revenue Service (in Brazil is SEFAZ)
        utiliza_pdv:
          type: bool
          example: true
          description: Informs if the company uses POS (Point of Sale)
    NovoPedido:
      type: object
      properties:
        id_pessoa:
          type: integer
          description: Pesrson ID
    NovoCupom:
      type: object
      properties:
        chnfe:
          type: string
          description: Invoice's access key
    NovoItem:
      type: object
      properties:
        num_cupom_fk:
          type: integer
          description: Slip number
        sequencia_item:
          type: integer
          description: Item's sequence
        motivo:
          type: integer
          description: Reason code
        id_autoriz:
          type: integer
          description: Authorization ID
        id_produto:
          type: integer
          description: Product ID
        valor_canc:
          type: float
          example: 0
          description: Cancel value
        motiv_canc:
          type: integer
          description: Cancel reason code
        autoriz_canc:
          type: integer
          description: Cancel authorization code
        nitem_nfce:
          type: integer
          description: Item number in eletronic invoice
    Pedido:
      type: object
      properties:
        id:
          type: integer
          description: Order's ID
        fiscdoc:
          type: integer
          description: Document's ID
        numero_pedido:
          type: integer
          description: Order's number
        tipo:
          type: string
          description: Order's type
        id_pessoa:
          type: integer
          description: Person ID
    Pedidos:
      type: array
      items:
        $ref: '#/components/schemas/Pedido'
    PedidoCancelado:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: OK - Novo status é 599 (PD CANCELADO)
          description: Success message!
    ID:
      type: object
      required:
        - message
      properties:
        id:
          type: integer
          example: 123
    OK:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: OK
          description: Success message!
    Erro:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Bad Request
          description: Information abou what went wrong
  requestBodies:
    BatchesPost:
      content:
        application/json:
          schema:
            allOf:
              - description: My Batche
                title: BatchesPost
              - $ref: '#/components/schemas/BatchePost'
    CashiersPut:
      content:
        application/json:
          schema:
            allOf:
              - description: My POS
                title: DevicePut
              - $ref: '#/components/schemas/CashierPut'
    CashiersPost:
      content:
        application/json:
          schema:
            allOf:
              - description: My POS
                title: DevicePost
              - $ref: '#/components/schemas/CashierPost'
security:
  - basicAuth: []
