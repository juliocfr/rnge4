openapi: 3.0.0
servers:
  - url: 'https://rnge.com.br:8091/v2'
    description: Produção
info:
  description: |-
    Nossa API utiliza o padrão REST e autenticação HTTP AuthBasic (conforme RFC 7617) em todos os recursos. O formato padrão de resposta é o JSON na imensa maioria dos recursos; as exceções são os recursos que retornam NFe/NFCe (XML) ou documentos para impressão (PDF).

    ## Autenticação

    Conforme a RFC7617, o cabeçalho *Authentication* é composto da palavra `Basic` seguida de um espaço e da string `username:password` em base64.

    > If the user agent wishes to send the user-id "Aladdin" and password
    > "open sesame", it would use the following header field:
    >
    >   Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

    Fonte: RFC 7617, capítulo 2, em https://datatracker.ietf.org/doc/html/rfc7617

    Em nosso caso, o campo "username" é composto de usuario@tenant, então o usuário "admin", tenant "zezinho" e senha "zeus" resultam na string `admin@zezinho:zeus` que convertida para base64 fica `YWRtaW5AemV6aW5obzp6ZXVz`. O próprio aplicativo cliente deve se encarregar de fazer essa conversão; para testes, pode-se usar sites que convertem para base64 como https://www.base64encode.org e similares.

    ## Definições

    **Tenant\:** Conta do cliente (eg:casadopapel) na Rednaxel. O tenant pode ter uma ou empresas (companies), que podem ser filiais usando a mesma raiz de CNPJ ou não.

    **Usuário\:** Cada usuário pertence a um tenant e tem um UserID global e um UserName único dentro do tenant. Por exemplo, "admin@thony" é diferente de "admin@tebori", apesar de ambos serem ADMIN cada um tem um UserID próprio.

    ## Padrões

    Todos os GET usam os parâmetros "filter", "sort" e "range" da seguinte forma:

     | Parâmetro  | Formato | URL Query                              | SQL equivalente        |
     |------------|---------|----------------------------------------|------------------------|
     | filter     |   JSON  | GET v2/resources?filter={"store":34}   | ... WHERE store = 34   |
     | sort       |  CSV    | GET v2/resources?sort=\["name","ASC"\] | ... ORDER BY name, asc |
     | range      |  CSV    | GET v2/resources?range=\[0,9\]         | ... OFFSET 0 LIMIT 10  |

    ## Ferramentas

    Os exemplos nesse documento usam a ferramenta de linha-de-comando curl. Ela está disponível na maioria das distribuições Linux via apt-get ou similar.
    Versão Windows: https://curl.haxx.se/windows/
  version: 2.0.0
  title: API do RNGE 4
  termsOfService: 'https://rednaxel.com/termos-de-uso'
  contact:
    name: Suporte
    email: suporte@rednaxel.com
    url: 'https://suporte.rednaxel.com'
  x-logo:
    url: 'https://storage.googleapis.com/rednaxel-dados/rednaxel-264.png'
    altText: Logo da Rednaxel
paths:
  /login:
    parameters: []
    post:
      summary: ''
      operationId: ''
      responses:
        '200':
          description: OK
      parameters:
        - schema:
            type: string
            default: Basic QURNSU5AemV6aW5obzp6ZXVz=
          in: header
          name: Authorization
          required: true
          description: BasicAuth
      description: Efetua o login na plataforma para obter UserID e Token
      security:
        - Basic QURNSU5AemV6aW5obzp6ZXVz: []
      tags:
        - Autenticação
  /ping:
    get:
      summary: ''
      tags:
        - Autenticação
      responses: {}
      operationId: ''
      description: Verifica se o servidor está online
      security: []
  /cashiers:
    get:
      tags:
        - PDV
      summary: ''
      description: Lista de Equipamentos PDV de todas as lojas (companies) do tenant
      parameters:
        - name: filter
          in: query
          description: Filters for the query
          schema:
            type: string
        - name: range
          in: query
          description: Paging
          schema:
            type: array
            items:
              type: integer
        - schema:
            type: string
            default: Basic MTIzNDp1dWlkLXRva2Vu
          in: header
          name: Authorization
          required: true
          description: 'ID:TOKEN'
    post:
      tags:
        - PDV
      summary: ''
      description: Cria novo PDV
      requestBody:
        $ref: '#/components/requestBodies/CashiersPost'
  '/cashiers/{id}':
    get:
      tags:
        - PDV
      summary: ''
      description: Consulta PDV
      parameters:
        - schema:
            type: string
            default: Basic MTIzNDp1dWlkLXRva2Vu
          in: header
          description: 'ID:TOKEN'
          required: true
          name: Authorization
    put:
      tags:
        - PDV
      summary: ''
      description: Atualiza um PDV
      requestBody:
        $ref: '#/components/requestBodies/CashiersPut'
      responses:
        '200':
          description: Success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashierResp'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
    delete:
      tags:
        - PDV
      summary: ''
      description: Deleta um PDV
      responses:
        '200':
          description: Info about deleted POS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cashier'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
      operationId: ''
    parameters:
      - schema:
          type: integer
          minimum: 1
          default: 1
        name: id
        in: path
        required: true
        description: ID do PDV
  /orders:
    get:
      tags:
        - Pedidos
      summary: ''
      description: Lista de pedidos
      parameters:
        - name: filter
          in: query
          description: Filtros
          schema:
            type: string
        - name: range
          in: query
          description: Paginação
          schema:
            type: array
            items:
              type: integer
    post:
      tags:
        - Pedidos
      summary: ''
      description: Cria um novo pedido
      requestBody:
        description: Pedido a ser criado
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovoPedido'
  '/orders/{id}':
    put:
      tags:
        - Pedidos
      summary: ''
      description: Atualiza pedido
      requestBody:
        description: Order to be modified
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovoPedido'
    get:
      tags:
        - Pedidos
      summary: ''
      description: Consulta pedido
    parameters:
      - schema:
          type: integer
          default: '1234'
        name: id
        in: path
        required: true
        description: Número do Pedido
  /distributions:
    get:
      summary: ''
      tags:
        - Distribuição
      operationId: ''
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
            examples: {}
      description: Distribuição
      parameters:
        - schema:
            type: string
          in: query
          name: filter
        - schema:
            type: array
          in: query
          name: range
        - schema:
            type: array
          in: query
          name: sort
    post:
      summary: ''
      operationId: ''
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                ids_empresas:
                  type: array
                  description: Lista de empresas destino
                  items: {}
                numero_pedido:
                  type: integer
                  description: Nº do pedido que contém os itens que serão enviados
                tipo_distrib:
                  type: string
                  enum:
                    - NORMAL
                    - ABLOJA
                    - REVFND
                    - REVSNO
                  description: 'Tipo de distribuição (padrão: NORMAL)'
                gerar_pedidos:
                  type: boolean
                  description: 'Se TRUE, gera os pedidos após criar a distribuição'
                predio:
                  type: integer
                  description: 'Prédio de origem (padrão: CD)'
                codigo_sku:
                  type: integer
                  description: Código de um SKU para testes
                curva_minima_geral:
                  type: integer
                  description: Somente produtos desta curva para cima serão enviados
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
        description: ''
      parameters: []
      tags:
        - Distribuição
      description: Cria uma nova distribuição
    parameters: []
components:
  securitySchemes:
    Basic QURNSU5AemV6aW5obzp6ZXVz:
      type: http
      scheme: basic
      description: 'ADMIN@zezinho:zeus'
    Basic MTIzNDp1dWlkLXRva2Vu:
      type: http
      scheme: basic
      description: '1234:uuid-token'
  schemas: null
security:
  - Basic MTIzNDp1dWlkLXRva2Vu: []
